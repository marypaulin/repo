  [Restored contents truncated]
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.22457098960876465
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [3139, 1465]
num_captured_incorrect:  [1165, 484]
prediction:  [0, 1]
Objective:  0.4581668114682884
Accuracy:  0.6418331885317116
COUNT of the best tree:  1
time when the best tree is achieved:  0.02693009376525879
TOTAL COUNT:  26
Testing Accuracy: 0.6330872774641771
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.22814488410949707
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [3170, 1435]
num_captured_incorrect:  [1174, 498]
prediction:  [0, 1]
Objective:  0.46308360477741584
Accuracy:  0.6369163952225841
COUNT of the best tree:  1
time when the best tree is achieved:  0.027300119400024414
TOTAL COUNT:  26
Testing Accuracy: 0.6429192006950478
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.22966504096984863
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [3157, 1448]
num_captured_incorrect:  [1177, 490]
prediction:  [0, 1]
Objective:  0.46199782844733983
Accuracy:  0.6380021715526601
COUNT of the best tree:  1
time when the best tree is achieved:  0.027425050735473633
TOTAL COUNT:  26
Testing Accuracy: 0.6407471763683753
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.855515956878662
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [3139, 1465]
num_captured_incorrect:  [1165, 484]
prediction:  [0, 1]
Objective:  0.4081668114682884
Accuracy:  0.6418331885317116
COUNT of the best tree:  1
time when the best tree is achieved:  0.027222871780395508
TOTAL COUNT:  256
Testing Accuracy: 0.6330872774641771
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.8606011867523193
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [3170, 1435]
num_captured_incorrect:  [1174, 498]
prediction:  [0, 1]
Objective:  0.41308360477741585
Accuracy:  0.6369163952225841
COUNT of the best tree:  1
time when the best tree is achieved:  0.02740001678466797
TOTAL COUNT:  284
Testing Accuracy: 0.6429192006950478
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.741969108581543
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [3157, 1448]
num_captured_incorrect:  [1177, 490]
prediction:  [0, 1]
Objective:  0.41199782844733984
Accuracy:  0.6380021715526601
COUNT of the best tree:  1
time when the best tree is achieved:  0.026669025421142578
TOTAL COUNT:  254
Testing Accuracy: 0.6407471763683753
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  12.639087200164795
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [1465, 274, 2865]
num_captured_incorrect:  [484, 107, 998]
prediction:  [1, 1, 0]
Objective:  0.3751346655082537
Accuracy:  0.6548653344917463
COUNT of the best tree:  341
time when the best tree is achieved:  2.4643802642822266
TOTAL COUNT:  17831
Testing Accuracy: 0.6556665219279201
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  14.77226185798645
lambda:  0.01
leaves:  [(9,), (-9, -1), (-9, 1)]
num_captured:  [469, 2719, 1417]
num_captured_incorrect:  [185, 908, 498]
prediction:  [1, 0, 1]
Objective:  0.3754940282301845
Accuracy:  0.6545059717698155
COUNT of the best tree:  7328
time when the best tree is achieved:  8.09278392791748
TOTAL COUNT:  24695
Testing Accuracy: 0.6516072980017377
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  9.01416802406311
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [1448, 269, 2888]
num_captured_incorrect:  [490, 89, 997]
prediction:  [1, 1, 0]
Objective:  0.3722366992399566
Accuracy:  0.6577633007600434
COUNT of the best tree:  3532
time when the best tree is achieved:  3.1586811542510986
TOTAL COUNT:  9870
Testing Accuracy: 0.6498696785403997
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  42.46119809150696
lambda:  0.005
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [1465, 1926, 310, 136, 767]
num_captured_incorrect:  [484, 582, 104, 55, 296]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.355364900086881
Accuracy:  0.6696350999131191
COUNT of the best tree:  20994
time when the best tree is achieved:  11.580518960952759
TOTAL COUNT:  231345
Testing Accuracy: 0.6678245766391663
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  202.11600804328918
lambda:  0.005
leaves:  [(1,), (-5, -1), (-1, 5, 12), (-12, -9, -1, 5), (-12, -1, 5, 9)]
num_captured:  [1435, 1951, 325, 522, 372]
num_captured_incorrect:  [498, 566, 111, 187, 165]
prediction:  [1, 0, 1, 0, 1]
Objective:  0.35659609120521174
Accuracy:  0.6684039087947883
COUNT of the best tree:  29679
time when the best tree is achieved:  14.469948053359985
TOTAL COUNT:  3694431
Testing Accuracy: 0.6668114682884448
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  38.84744906425476
lambda:  0.005
leaves:  [(1,), (-3, -1), (-7, -1, 3), (-12, -1, 3, 7), (-1, 3, 7, 12)]
num_captured:  [1448, 269, 1884, 773, 231]
num_captured_incorrect:  [490, 89, 544, 309, 87]
prediction:  [1, 1, 0, 0, 1]
Objective:  0.35485884907709014
Accuracy:  0.6701411509229098
COUNT of the best tree:  27365
time when the best tree is achieved:  14.46698808670044
TOTAL COUNT:  229433
Testing Accuracy: 0.6655082536924414
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.0004029273987
lambda:  0.0025
leaves:  [(1,), (-7, -1), (-12, -11, -1, 7), (-11, -1, 7, 12), (-8, -1, 7, 11), (-1, 7, 8, 11)]
num_captured:  [1465, 1926, 545, 231, 365, 72]
num_captured_incorrect:  [484, 582, 187, 79, 147, 26]
prediction:  [1, 0, 0, 1, 1, 0]
Objective:  0.34188966116420505
Accuracy:  0.673110338835795
COUNT of the best tree:  1021659
time when the best tree is achieved:  67.45790576934814
TOTAL COUNT:  56508453
Testing Accuracy: 0.6647850629613548
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.000199317932
lambda:  0.0025
leaves:  [(1,), (-5, -1), (-1, 5, 12), (-12, -1, 5, 10), (-12, -10, -3, -1, 5), (-12, -10, -9, -1, 3, 5), (-12, -10, -1, 3, 5, 9)]
num_captured:  [1435, 1951, 325, 184, 125, 368, 217]
num_captured_incorrect:  [498, 566, 111, 51, 41, 139, 97]
prediction:  [1, 0, 1, 0, 1, 0, 1]
Objective:  0.3438843648208469
Accuracy:  0.6736156351791531
COUNT of the best tree:  31876577
time when the best tree is achieved:  2774.8150882720947
TOTAL COUNT:  33623973
Testing Accuracy: 0.6689834926151172
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3601.057733774185
lambda:  0.0025
leaves:  [(-3,), (1, 3), (-7, -1, 3), (-12, -1, 3, 7), (-1, 3, 7, 12)]
num_captured:  [615, 1102, 1884, 773, 231]
num_captured_incorrect:  [171, 408, 544, 309, 87]
prediction:  [1, 1, 0, 0, 1]
Objective:  0.34235884907709013
Accuracy:  0.6701411509229098
COUNT of the best tree:  1427963
time when the best tree is achieved:  93.39227485656738
TOTAL COUNT:  53509652
Testing Accuracy: 0.6655082536924414
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.005197763443
lambda:  0.001
leaves:  [(-5,), (-4, 5), (-6, -1, 4, 5), (-3, 1, 4, 5), (1, 3, 4, 5, 11), (-12, -3, -1, 4, 5, 6), (-12, -1, 3, 4, 5, 6), (-7, -1, 4, 5, 6, 12), (-1, 4, 5, 6, 7, 12), (-11, -8, 1, 3, 4, 5), (-11, 1, 3, 4, 5, 8)]
num_captured:  [194, 231, 533, 94, 6, 93, 1731, 405, 241, 929, 147]
num_captured_incorrect:  [43, 63, 117, 16, 1, 44, 576, 175, 85, 351, 54]
prediction:  [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1]
Objective:  0.34223370981754997
Accuracy:  0.66876629018245
COUNT of the best tree:  20316
time when the best tree is achieved:  3.6284019947052
TOTAL COUNT:  49925406
Testing Accuracy: 0.667390360399479
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.0052490234375
lambda:  0.001
leaves:  [(2,), (-8, -5, -2), (-2, 1, 5), (-5, -2, -1, 8), (-5, -2, 1, 8), (-10, -2, -1, 5), (-2, -1, 5, 10)]
num_captured:  [1405, 93, 297, 1080, 1051, 563, 116]
num_captured_incorrect:  [397, 29, 73, 375, 397, 217, 51]
prediction:  [0, 1, 1, 0, 1, 1, 0]
Objective:  0.3412019543973941
Accuracy:  0.6657980456026059
COUNT of the best tree:  131466
time when the best tree is achieved:  9.315272808074951
TOTAL COUNT:  51479241
Testing Accuracy: 0.6663770634231103
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.000832080841
lambda:  0.001
leaves:  [(-3,), (-12, -1, 3), (-12, 1, 3), (-7, 3, 12), (3, 7, 12)]
num_captured:  [615, 2108, 1102, 549, 231]
num_captured_incorrect:  [171, 645, 408, 208, 87]
prediction:  [1, 0, 1, 0, 1]
Objective:  0.3348588490770902
Accuracy:  0.6701411509229098
COUNT of the best tree:  16881878
time when the best tree is achieved:  687.4308931827545
TOTAL COUNT:  64731551
Testing Accuracy: 0.6655082536924414
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.1123299598694
lambda:  0.0005
leaves:  [(-5,), (-6, -1, 5), (-3, 1, 5), (1, 3, 5, 11), (-12, -3, -1, 5, 6), (-12, -1, 3, 5, 6), (-7, -1, 5, 6, 12), (-1, 5, 6, 7, 12), (-11, -6, 1, 3, 5), (-11, 1, 3, 5, 6)]
num_captured:  [194, 533, 241, 6, 124, 1731, 410, 289, 262, 814]
num_captured_incorrect:  [43, 117, 49, 1, 58, 576, 176, 97, 117, 288]
prediction:  [1, 0, 1, 1, 1, 0, 0, 1, 1, 1]
Objective:  0.33558210251954823
Accuracy:  0.6694178974804518
COUNT of the best tree:  53800
time when the best tree is achieved:  4.882663011550903
TOTAL COUNT:  41337575
Testing Accuracy: 0.6669561441597915
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.0020639896393
lambda:  0.0005
leaves:  [(2,), (-8, -2, 6), (-8, -6, -2, -1), (-3, -2, 1, 8), (-8, -6, -5, -2, 1), (-8, -6, -2, 1, 5), (-12, -9, -2, -1, 8), (-12, -2, -1, 8, 9), (-5, -2, -1, 8, 12), (-2, -1, 5, 8, 12), (-5, -2, 1, 3, 8), (-2, 1, 3, 5, 8)]
num_captured:  [1405, 131, 7, 215, 21, 12, 728, 118, 557, 305, 920, 186]
num_captured_incorrect:  [397, 33, 3, 50, 9, 3, 240, 49, 226, 104, 365, 51]
prediction:  [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1]
Objective:  0.3382475570032573
Accuracy:  0.6677524429967427
COUNT of the best tree:  42075
time when the best tree is achieved:  5.043846130371094
TOTAL COUNT:  16989837
Testing Accuracy: 0.6702867072111207
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.0289027690887
lambda:  0.0005
leaves:  [(-6,), (-4, 6), (-5, -1, 4, 6), (-3, 1, 4, 6), (-12, -3, -1, 4, 5, 6), (-12, -1, 3, 4, 5, 6), (-7, -1, 4, 5, 6, 12), (-1, 4, 5, 6, 7, 12), (-8, -5, 1, 3, 4, 6), (-5, 1, 3, 4, 6, 8), (-10, 1, 3, 4, 5, 6), (1, 3, 4, 5, 6, 10)]
num_captured:  [185, 218, 533, 77, 90, 1716, 421, 263, 220, 35, 839, 8]
num_captured_incorrect:  [45, 58, 113, 15, 38, 572, 176, 97, 103, 13, 282, 1]
prediction:  [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]
Objective:  0.33455591748099883
Accuracy:  0.6714440825190011
COUNT of the best tree:  150236
time when the best tree is achieved:  8.707009077072144
TOTAL COUNT:  43328727
Testing Accuracy: 0.6659426585577759
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.10804605484
lambda:  0.0001
leaves:  [(-5,), (-3, 1, 5), (-6, -1, 2, 5), (-9, -7, -2, -1, 5), (-9, -2, -1, 5, 7), (-11, -2, -1, 5, 9), (-2, -1, 5, 9, 11), (-3, -1, 2, 5, 6), (-1, 2, 3, 5, 6), (-8, -6, 1, 3, 5), (-6, 1, 3, 5, 8), (-8, 1, 3, 5, 6), (1, 3, 5, 6, 8)]
num_captured:  [194, 241, 234, 554, 289, 734, 110, 49, 1117, 229, 33, 705, 115]
num_captured_incorrect:  [43, 49, 41, 216, 97, 243, 49, 24, 349, 100, 16, 252, 37]
prediction:  [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1]
Objective:  0.3305788879235448
Accuracy:  0.6707211120764552
COUNT of the best tree:  4846510
time when the best tree is achieved:  282.7659239768982
TOTAL COUNT:  43993089
Testing Accuracy: 0.67216673903604
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3602.027109861374
lambda:  0.0001
leaves:  [(2,), (-8, -2), (-6, -2, 8), (-4, -2, -1, 6, 8), (-2, 1, 6, 8, 9), (-9, -3, -2, 1, 6, 8), (-2, -1, 4, 6, 7, 8, 12), (-12, -2, -1, 4, 6, 7, 8, 10), (-9, -7, -2, 1, 3, 5, 6, 8), (-12, -7, -5, -3, -2, -1, 4, 6, 8), (-12, -7, -3, -2, -1, 4, 5, 6, 8), (-10, -7, -3, -2, -1, 4, 6, 8, 12), (-7, -3, -2, -1, 4, 6, 8, 10, 12), (-10, -7, -5, -2, -1, 3, 4, 6, 8), (-7, -5, -2, -1, 3, 4, 6, 8, 10), (-11, -7, -2, -1, 3, 4, 5, 6, 8), (-7, -2, -1, 3, 4, 5, 6, 8, 11), (-12, -10, -9, -2, -1, 4, 6, 7, 8), (-12, -10, -2, -1, 4, 6, 7, 8, 9), (-10, -9, -5, -4, -2, 1, 3, 6, 8), (-10, -9, -5, -2, 1, 3, 4, 6, 8), (-9, -5, -4, -2, 1, 3, 6, 8, 10), (-9, -5, -2, 1, 3, 4, 6, 8, 10), (-10, -9, -2, 1, 3, 5, 6, 7, 8), (-9, -2, 1, 3, 5, 6, 7, 8, 10)]
num_captured:  [1405, 171, 211, 293, 11, 84, 123, 32, 141, 5, 7, 24, 6, 591, 164, 119, 100, 75, 88, 239, 550, 30, 101, 31, 4]
num_captured_incorrect:  [397, 48, 59, 80, 0, 21, 32, 8, 39, 1, 1, 11, 2, 219, 62, 53, 42, 35, 33, 111, 202, 11, 33, 11, 1]
prediction:  [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1]
Objective:  0.33083876221498365
Accuracy:  0.6716612377850164
COUNT of the best tree:  4437653
time when the best tree is achieved:  422.6626272201538
TOTAL COUNT:  22907812
Testing Accuracy: 0.6681146828844483
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.034855365753
lambda:  0.0001
leaves:  [(-6,), (-5, -1, 6), (1, 6, 9), (-4, -1, 2, 5, 6), (-9, -3, 1, 4, 6), (-12, -3, -2, -1, 5, 6), (-12, -2, -1, 3, 5, 6), (-7, -2, -1, 5, 6, 12), (-2, -1, 5, 6, 7, 12), (-3, -1, 2, 4, 5, 6), (-1, 2, 3, 4, 5, 6), (-9, -8, -4, -3, 1, 6), (-9, -4, -3, 1, 6, 8), (-9, -8, -5, 1, 3, 6), (-9, -5, 1, 3, 6, 8), (-9, -8, 1, 3, 5, 6), (-9, 1, 3, 5, 6, 8)]
num_captured:  [185, 533, 66, 1, 67, 70, 613, 428, 302, 48, 1103, 103, 18, 220, 35, 684, 129]
num_captured_incorrect:  [45, 113, 12, 0, 12, 28, 233, 180, 105, 21, 339, 28, 6, 103, 13, 235, 41]
prediction:  [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1]
Objective:  0.3304730727470141
Accuracy:  0.6712269272529858
COUNT of the best tree:  8520364
time when the best tree is achieved:  870.5952541828156
TOTAL COUNT:  32217291
Testing Accuracy: 0.6672458731537794
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.105414867401
lambda:  5e-05
leaves:  [(-5,), (-3, 1, 5), (-6, -1, 2, 5), (1, 3, 5, 11), (-7, -4, -2, -1, 5), (-4, -1, 2, 5, 6), (-8, -4, -2, -1, 5, 7), (-4, -2, -1, 5, 7, 8), (-12, -3, -2, -1, 4, 5), (-12, -2, -1, 3, 4, 5), (-7, -2, -1, 4, 5, 12), (-2, -1, 4, 5, 7, 12), (-3, -1, 2, 4, 5, 6), (-1, 2, 3, 4, 5, 6), (-11, -8, -6, 1, 3, 5), (-11, -8, 1, 3, 5, 6), (-11, -6, 1, 3, 5, 8), (-11, 1, 3, 5, 6, 8)]
num_captured:  [194, 241, 234, 6, 9, 1, 63, 11, 45, 769, 549, 241, 48, 1117, 229, 700, 33, 114]
num_captured_incorrect:  [43, 49, 41, 1, 1, 0, 15, 4, 20, 263, 215, 85, 24, 349, 100, 251, 16, 37]
prediction:  [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1]
Objective:  0.3297444830582102
Accuracy:  0.6711555169417898
COUNT of the best tree:  29372536
time when the best tree is achieved:  2830.3898050785065
TOTAL COUNT:  37231497
Testing Accuracy: 0.6699956578376032
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3601.1141319274902
lambda:  5e-05
leaves:  [(2,), (-8, -2), (-6, -2, 8), (-4, -2, -1, 6, 8), (-2, 1, 6, 8, 9), (-9, -3, -2, 1, 6, 8), (-11, -2, -1, 4, 6, 7, 8), (-2, -1, 4, 6, 7, 8, 10, 11), (-9, -7, -2, 1, 3, 5, 6, 8), (-12, -7, -5, -3, -2, -1, 4, 6, 8), (-12, -7, -3, -2, -1, 4, 5, 6, 8), (-10, -7, -3, -2, -1, 4, 6, 8, 12), (-7, -3, -2, -1, 4, 6, 8, 10, 12), (-10, -7, -5, -2, -1, 3, 4, 6, 8), (-7, -5, -2, -1, 3, 4, 6, 8, 10), (-11, -7, -2, -1, 3, 4, 5, 6, 8), (-7, -2, -1, 3, 4, 5, 6, 8, 11), (-10, -9, -2, -1, 4, 6, 7, 8, 11), (-10, -2, -1, 4, 6, 7, 8, 9, 11), (-10, -9, -5, -4, -2, 1, 3, 6, 8), (-10, -9, -5, -2, 1, 3, 4, 6, 8), (-9, -5, -4, -2, 1, 3, 6, 8, 10), (-9, -5, -2, 1, 3, 4, 6, 8, 10), (-10, -9, -2, 1, 3, 5, 6, 7, 8), (-9, -2, 1, 3, 5, 6, 7, 8, 10)]
num_captured:  [1405, 171, 211, 293, 11, 84, 123, 32, 141, 5, 7, 24, 6, 591, 164, 119, 100, 75, 88, 239, 550, 30, 101, 31, 4]
num_captured_incorrect:  [397, 48, 59, 80, 0, 21, 32, 8, 39, 1, 1, 11, 2, 219, 62, 53, 42, 35, 33, 111, 202, 11, 33, 11, 1]
prediction:  [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1]
Objective:  0.3295887622149836
Accuracy:  0.6716612377850164
COUNT of the best tree:  902571
time when the best tree is achieved:  134.3934919834137
TOTAL COUNT:  15765049
Testing Accuracy: 0.6681146828844483
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3600.0403282642365
lambda:  5e-05
leaves:  [(-6,), (-5, -1, 6), (1, 6, 9), (-4, -1, 2, 5, 6), (-9, -3, 1, 4, 6), (-12, -3, -2, -1, 5, 6), (-12, -2, -1, 3, 5, 6), (-7, -2, -1, 5, 6, 12), (-2, -1, 5, 6, 7, 12), (-3, -1, 2, 4, 5, 6), (-1, 2, 3, 4, 5, 6), (-9, -8, -4, -3, 1, 6), (-9, -4, -3, 1, 6, 8), (-9, -8, -5, 1, 3, 6), (-9, -5, 1, 3, 6, 8), (-9, -8, 1, 3, 5, 6), (-9, 1, 3, 5, 6, 8)]
num_captured:  [185, 533, 66, 1, 67, 70, 613, 428, 302, 48, 1103, 103, 18, 220, 35, 684, 129]
num_captured_incorrect:  [45, 113, 12, 0, 12, 28, 233, 180, 105, 21, 339, 28, 6, 103, 13, 235, 41]
prediction:  [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1]
Objective:  0.32962307274701413
Accuracy:  0.6712269272529858
COUNT of the best tree:  8520364
time when the best tree is achieved:  869.8923251628876
TOTAL COUNT:  32456727
Testing Accuracy: 0.6672458731537794
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.2353379726409912
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [3139, 1465]
num_captured_incorrect:  [1165, 484]
prediction:  [0, 1]
Objective:  0.5581668114682885
Accuracy:  0.6418331885317115
COUNT of the best tree:  1
time when the best tree is achieved:  0.02615976333618164
TOTAL COUNT:  12
Testing Accuracy: 0.6330872774641771
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.21279215812683105
lambda:  0.1
leaves:  [()]
num_captured:  [4605]
num_captured_incorrect:  [2111]
prediction:  [0]
Objective:  0.5584147665580891
Accuracy:  0.5415852334419109
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  11
Testing Accuracy: 0.5286707211120765
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.20975208282470703
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [3157, 1448]
num_captured_incorrect:  [1177, 490]
prediction:  [0, 1]
Objective:  0.5619978284473399
Accuracy:  0.63800217155266
COUNT of the best tree:  1
time when the best tree is achieved:  0.027410030364990234
TOTAL COUNT:  12
Testing Accuracy: 0.6407471763683753
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.22672581672668457
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [3139, 1465]
num_captured_incorrect:  [1165, 484]
prediction:  [0, 1]
Objective:  0.4581668114682884
Accuracy:  0.6418331885317116
COUNT of the best tree:  1
time when the best tree is achieved:  0.02572798728942871
TOTAL COUNT:  26
Testing Accuracy: 0.6330872774641771
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.22279095649719238
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [3170, 1435]
num_captured_incorrect:  [1174, 498]
prediction:  [0, 1]
Objective:  0.46308360477741584
Accuracy:  0.6369163952225841
COUNT of the best tree:  1
time when the best tree is achieved:  0.026800870895385742
TOTAL COUNT:  26
Testing Accuracy: 0.6429192006950478
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.21595525741577148
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [3157, 1448]
num_captured_incorrect:  [1177, 490]
prediction:  [0, 1]
Objective:  0.46199782844733983
Accuracy:  0.6380021715526601
COUNT of the best tree:  1
time when the best tree is achieved:  0.025565147399902344
TOTAL COUNT:  26
Testing Accuracy: 0.6407471763683753
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.8013019561767578
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [3139, 1465]
num_captured_incorrect:  [1165, 484]
prediction:  [0, 1]
Objective:  0.4081668114682884
Accuracy:  0.6418331885317116
COUNT of the best tree:  1
time when the best tree is achieved:  0.02609419822692871
TOTAL COUNT:  256
Testing Accuracy: 0.6330872774641771
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.8816869258880615
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [3170, 1435]
num_captured_incorrect:  [1174, 498]
prediction:  [0, 1]
Objective:  0.41308360477741585
Accuracy:  0.6369163952225841
COUNT of the best tree:  1
time when the best tree is achieved:  0.027004003524780273
TOTAL COUNT:  284
Testing Accuracy: 0.6429192006950478
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.7720520496368408
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [3157, 1448]
num_captured_incorrect:  [1177, 490]
prediction:  [0, 1]
Objective:  0.41199782844733984
Accuracy:  0.6380021715526601
COUNT of the best tree:  1
time when the best tree is achieved:  0.027424097061157227
TOTAL COUNT:  254
Testing Accuracy: 0.6407471763683753
nrule: 12
ndata: 4604
gr: [0.0044435  0.00273654 0.00383916 0.0051526  0.00726446 0.00857736
 0.00967276 0.02119166 0.02516327 0.00409146 0.00027032 0.03865805]
order: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
odr: [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
the order of x's columns:  [11, 8, 7, 6, 5, 4, 3, 0, 9, 2, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  12.688432216644287
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [1465, 274, 2865]
num_captured_incorrect:  [484, 107, 998]
prediction:  [1, 1, 0]
Objective:  0.3751346655082537
Accuracy:  0.6548653344917463
COUNT of the best tree:  341
time when the best tree is achieved:  2.494150161743164
TOTAL COUNT:  17831
Testing Accuracy: 0.6556665219279201
nrule: 12
ndata: 4605
gr: [0.00426016 0.00490929 0.0065401  0.00802099 0.00813874 0.00524957
 0.0070207  0.01704967 0.02715522 0.00290284 0.00082398 0.03426662]
order: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
odr: [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
the order of x's columns:  [11, 8, 7, 4, 3, 6, 2, 5, 1, 0, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  15.136029958724976
lambda:  0.01
leaves:  [(9,), (-9, -1), (-9, 1)]
num_captured:  [469, 2719, 1417]
num_captured_incorrect:  [185, 908, 498]
prediction:  [1, 0, 1]
Objective:  0.3754940282301845
Accuracy:  0.6545059717698155
COUNT of the best tree:  7328
time when the best tree is achieved:  8.308361053466797
TOTAL COUNT:  24695
Testing Accuracy: 0.6516072980017377
nrule: 12
ndata: 4605
gr: [0.00446431 0.00384665 0.00425605 0.00662036 0.00919607 0.00719285
 0.009199   0.02057142 0.02606772 0.00291846 0.00032755 0.03595405]
order: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 0, 2, 1, 9, 10]
^Z
[1]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3167078495025635
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.04123187065124512
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.34642720222473145
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.03960227966308594
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.612579107284546
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.04005312919616699
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  17.85674476623535
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [2174, 414, 4319]
num_captured_incorrect:  [736, 151, 1495]
prediction:  [1, 1, 0]
Objective:  0.37486752569856663
Accuracy:  0.6551324743014334
COUNT of the best tree:  3601
time when the best tree is achieved:  4.243435859680176
TOTAL COUNT:  20646
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  58.909164905548096
lambda:  0.005
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.35596858259736497
Accuracy:  0.669031417402635
COUNT of the best tree:  18195
time when the best tree is achieved:  15.184932947158813
TOTAL COUNT:  241306
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  4509.613885879517
lambda:  0.0025
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.34346858259736496
Accuracy:  0.669031417402635
COUNT of the best tree:  3249198
time when the best tree is achieved:  182.80152797698975
TOTAL COUNT:  70415779
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
COUNT: 101000000
COUNT: 102000000
COUNT: 103000000
COUNT: 104000000
COUNT: 105000000
COUNT: 106000000
COUNT: 107000000
COUNT: 108000000
COUNT: 109000000
COUNT: 110000000
COUNT: 111000000
COUNT: 112000000
COUNT: 113000000
COUNT: 114000000
COUNT: 115000000
COUNT: 116000000
COUNT: 117000000
COUNT: 118000000
COUNT: 119000000
COUNT: 120000000
COUNT: 121000000
COUNT: 122000000
COUNT: 123000000
COUNT: 124000000
COUNT: 125000000
COUNT: 126000000
COUNT: 127000000
COUNT: 128000000
COUNT: 129000000
COUNT: 130000000
COUNT: 131000000
COUNT: 132000000
COUNT: 133000000
COUNT: 134000000
COUNT: 135000000
COUNT: 136000000
COUNT: 137000000
COUNT: 138000000
COUNT: 139000000
COUNT: 140000000
COUNT: 141000000
COUNT: 142000000
COUNT: 143000000
COUNT: 144000000
COUNT: 145000000
COUNT: 146000000
COUNT: 147000000
COUNT: 148000000
COUNT: 149000000
COUNT: 150000000
COUNT: 151000000
COUNT: 152000000
COUNT: 153000000
COUNT: 154000000
COUNT: 155000000
COUNT: 156000000
COUNT: 157000000
COUNT: 158000000
COUNT: 159000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  15760.382443904877
lambda:  0.001
leaves:  [(-6,), (2, 6), (-11, -2, 6, 7), (-2, 6, 9, 11), (-11, -7, -2, -1, 6), (-11, -7, -2, 1, 6), (-10, -9, -2, 6, 11), (-9, -2, 6, 10, 11)]
num_captured:  [275, 2101, 827, 262, 840, 1604, 845, 153]
num_captured_incorrect:  [68, 609, 247, 71, 331, 596, 299, 62]
prediction:  [1, 0, 1, 0, 0, 1, 0, 1]
Objective:  0.3385342406254525
Accuracy:  0.6694657593745474
COUNT of the best tree:  7012200
time when the best tree is achieved:  277.77613973617554
TOTAL COUNT:  159729701
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
COUNT: 101000000
COUNT: 102000000
COUNT: 103000000
COUNT: 104000000
COUNT: 105000000
COUNT: 106000000
COUNT: 107000000
COUNT: 108000000
COUNT: 109000000
COUNT: 110000000
COUNT: 111000000
COUNT: 112000000
COUNT: 113000000
COUNT: 114000000
COUNT: 115000000
COUNT: 116000000
COUNT: 117000000
COUNT: 118000000
COUNT: 119000000
COUNT: 120000000
COUNT: 121000000
COUNT: 122000000
^Z[1]   Terminated: 15          python3.7 test_accuracy.py

[2]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.31284093856811523
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.04000711441040039
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.33861780166625977
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.042016029357910156
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.58089280128479
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.03994894027709961
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
^Z[2]   Terminated: 15          python3.7 test_accuracy.py

[3]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.31622910499572754
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.04006814956665039
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.339724063873291
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.04018902778625488
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.5125858783721924
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.04015088081359863
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  17.219136714935303
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [2174, 414, 4319]
num_captured_incorrect:  [736, 151, 1495]
prediction:  [1, 1, 0]
Objective:  0.37486752569856663
Accuracy:  0.6551324743014334
COUNT of the best tree:  3601
time when the best tree is achieved:  4.033921718597412
TOTAL COUNT:  20646
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  56.88105010986328
lambda:  0.005
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.35596858259736497
Accuracy:  0.669031417402635
COUNT of the best tree:  18195
time when the best tree is achieved:  14.609852075576782
TOTAL COUNT:  241306
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000040531158
lambda:  0.0025
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.34346858259736496
Accuracy:  0.669031417402635
COUNT of the best tree:  3249198
time when the best tree is achieved:  178.6445300579071
TOTAL COUNT:  31862185
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0013449192047
lambda:  0.001
leaves:  [(-6,), (2, 6), (-11, -2, 6, 7), (-2, 6, 9, 11), (-11, -7, -2, -1, 6), (-11, -7, -2, 1, 6), (-10, -9, -2, 6, 11), (-9, -2, 6, 10, 11)]
num_captured:  [275, 2101, 827, 262, 840, 1604, 845, 153]
num_captured_incorrect:  [68, 609, 247, 71, 331, 596, 299, 62]
prediction:  [1, 0, 1, 0, 0, 1, 0, 1]
Objective:  0.3385342406254525
Accuracy:  0.6694657593745474
COUNT of the best tree:  7012200
time when the best tree is achieved:  274.7186071872711
TOTAL COUNT:  41463346
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
COUNT: 101000000
COUNT: 102000000
COUNT: 103000000
COUNT: 104000000
COUNT: 105000000
COUNT: 106000000
COUNT: 107000000
COUNT: 108000000
COUNT: 109000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  10800.017634868622
lambda:  0.0005
leaves:  [(-6,), (-4, 6), (-5, -1, 4, 6), (1, 4, 6, 10), (-10, -3, 1, 4, 6), (-12, -1, 4, 5, 6, 9), (-12, -10, -9, -1, 4, 5, 6), (-12, -9, -1, 4, 5, 6, 10), (-7, -3, -1, 4, 5, 6, 12), (-3, -1, 4, 5, 6, 7, 12), (-7, -1, 3, 4, 5, 6, 12), (-1, 3, 4, 5, 6, 7, 12), (-10, -9, -5, 1, 3, 4, 6), (-10, -5, 1, 3, 4, 6, 9), (-10, -7, 1, 3, 4, 5, 6), (-10, 1, 3, 4, 5, 6, 7)]
num_captured:  [275, 330, 810, 13, 127, 644, 1680, 397, 22, 48, 597, 331, 344, 49, 1008, 232]
num_captured_incorrect:  [68, 90, 176, 1, 26, 162, 556, 181, 10, 18, 253, 119, 157, 20, 361, 67]
prediction:  [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1]
Objective:  0.33592818879397707
Accuracy:  0.6720718112060229
COUNT of the best tree:  70820676
time when the best tree is achieved:  5667.4549169540405
TOTAL COUNT:  109596893
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  10800.05751991272
lambda:  0.0001
leaves:  [(-6,), (-5, -1, 6), (1, 6, 8), (-8, -5, -4, 1, 6), (-8, -3, 1, 4, 6), (-9, -7, -4, -1, 5, 6), (-7, -4, -1, 5, 6, 9), (-11, -7, -1, 4, 5, 6), (-7, -1, 4, 5, 6, 11), (-12, -10, -1, 5, 6, 7), (-10, -1, 5, 6, 7, 12), (-9, -1, 5, 6, 7, 10), (-1, 5, 6, 7, 9, 10), (-9, -8, -4, 1, 5, 6), (-8, -4, 1, 5, 6, 9), (-8, -7, 1, 3, 4, 6), (-8, 1, 3, 4, 6, 7)]
num_captured:  [275, 810, 109, 1, 106, 12, 2, 1528, 536, 800, 349, 504, 108, 156, 21, 1401, 189]
num_captured_incorrect:  [68, 176, 21, 0, 22, 4, 0, 497, 170, 285, 126, 208, 45, 38, 8, 547, 54]
prediction:  [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1]
Objective:  0.3302073114231938
Accuracy:  0.6714926885768062
COUNT of the best tree:  11613892
time when the best tree is achieved:  915.3660826683044
TOTAL COUNT:  100208289
^Z
[4]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.11857295036315918
lambda:  0.1
leaves:  [()]
num_captured:  [1728]
num_captured_incorrect:  [518]
prediction:  [0]
Objective:  0.3997685185185186
Accuracy:  0.7002314814814814
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  25
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.9294710159301758
lambda:  0.05
leaves:  [(1,), (-2, -1), (-1, 2)]
num_captured:  [576, 768, 384]
num_captured_incorrect:  [0, 250, 0]
prediction:  [0, 1, 0]
Objective:  0.29467592592592595
Accuracy:  0.8553240740740741
COUNT of the best tree:  42
time when the best tree is achieved:  0.12461709976196289
TOTAL COUNT:  2252
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  299.66302490234375
lambda:  0.025
leaves:  [(1,), (-2, -1), (-1, 2)]
num_captured:  [576, 768, 384]
num_captured_incorrect:  [0, 250, 0]
prediction:  [0, 1, 0]
Objective:  0.21967592592592594
Accuracy:  0.8553240740740741
COUNT of the best tree:  42
time when the best tree is achieved:  0.1278989315032959
TOTAL COUNT:  4293385
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000970363617
lambda:  0.01
leaves:  [(2,), (-2, 1), (-2, -1, 6), (-6, -2, -1, 5), (-7, -6, -5, -2, -1), (-6, -5, -2, -1, 7)]
num_captured:  [576, 384, 192, 144, 288, 144]
num_captured_incorrect:  [0, 0, 28, 16, 108, 26]
prediction:  [0, 0, 1, 1, 0, 1]
Objective:  0.16300925925925924
Accuracy:  0.8969907407407407
COUNT of the best tree:  709333
time when the best tree is achieved:  60.884692907333374
TOTAL COUNT:  14905326
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0011410713196
lambda:  0.005
leaves:  [(2,), (-2, 1), (-2, -1, 5), (-8, -6, -5, -2, -1), (-8, -5, -2, -1, 6), (-10, -5, -2, -1, 8), (-5, -2, -1, 8, 10)]
num_captured:  [576, 384, 192, 288, 96, 144, 48]
num_captured_incorrect:  [0, 0, 18, 108, 24, 14, 14]
prediction:  [0, 0, 1, 0, 1, 1, 1]
Objective:  0.13800925925925925
Accuracy:  0.8969907407407407
COUNT of the best tree:  9353053
time when the best tree is achieved:  384.8034157752991
TOTAL COUNT:  28785451
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0002529621124
lambda:  0.0025
leaves:  [(1,), (-1, 2), (-2, -1, 6, 9), (-8, -6, -5, -2, -1), (-8, -6, -2, -1, 5), (-6, -3, -2, -1, 8), (-6, -2, -1, 3, 8), (-10, -9, -2, -1, 6), (-9, -2, -1, 6, 10)]
num_captured:  [576, 384, 64, 288, 144, 72, 72, 96, 32]
num_captured_incorrect:  [0, 0, 0, 108, 16, 23, 3, 14, 14]
prediction:  [0, 0, 1, 0, 1, 1, 1, 1, 1]
Objective:  0.12550925925925924
Accuracy:  0.8969907407407407
COUNT of the best tree:  5181973
time when the best tree is achieved:  185.80963373184204
TOTAL COUNT:  33177466
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0014326572418
lambda:  0.001
leaves:  [(1,), (-1, 2), (-2, -1, 7, 9), (-7, -6, -5, -2, -1), (-7, -6, -2, -1, 5), (-7, -3, -2, -1, 6), (-7, -2, -1, 3, 6), (-9, -3, -2, -1, 7), (-9, -2, -1, 3, 7)]
num_captured:  [576, 384, 64, 288, 96, 96, 96, 64, 64]
num_captured_incorrect:  [0, 0, 0, 108, 14, 24, 4, 24, 4]
prediction:  [0, 0, 1, 0, 1, 1, 1, 1, 1]
Objective:  0.11200925925925923
Accuracy:  0.8969907407407408
COUNT of the best tree:  5864982
time when the best tree is achieved:  200.8288938999176
TOTAL COUNT:  37537753
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
COUNT: 101000000
COUNT: 102000000
COUNT: 103000000
COUNT: 104000000
COUNT: 105000000
COUNT: 106000000
COUNT: 107000000
COUNT: 108000000
COUNT: 109000000
COUNT: 110000000
COUNT: 111000000
COUNT: 112000000
COUNT: 113000000
COUNT: 114000000
COUNT: 115000000
COUNT: 116000000
COUNT: 117000000
COUNT: 118000000
COUNT: 119000000
COUNT: 120000000
COUNT: 121000000
COUNT: 122000000
COUNT: 123000000
COUNT: 124000000
COUNT: 125000000
COUNT: 126000000
COUNT: 127000000
COUNT: 128000000
COUNT: 129000000
COUNT: 130000000
COUNT: 131000000
COUNT: 132000000
COUNT: 133000000
COUNT: 134000000
COUNT: 135000000
COUNT: 136000000
COUNT: 137000000
COUNT: 138000000
COUNT: 139000000
COUNT: 140000000
COUNT: 141000000
COUNT: 142000000
COUNT: 143000000
COUNT: 144000000
COUNT: 145000000
COUNT: 146000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  10800.000445842743
lambda:  0.0005
leaves:  [(1,), (-1, 2), (-2, -1, 7, 9), (-7, -6, -5, -2, -1), (-7, -6, -2, -1, 5), (-7, -3, -2, -1, 6), (-7, -2, -1, 3, 6), (-9, -3, -2, -1, 7), (-9, -2, -1, 3, 7)]
num_captured:  [576, 384, 64, 288, 96, 96, 96, 64, 64]
num_captured_incorrect:  [0, 0, 0, 108, 14, 24, 4, 24, 4]
prediction:  [0, 0, 1, 0, 1, 1, 1, 1, 1]
Objective:  0.10750925925925923
Accuracy:  0.8969907407407408
COUNT of the best tree:  5996979
time when the best tree is achieved:  214.99775099754333
TOTAL COUNT:  146376886
^Z[3]   Terminated: 15          python3.7 test_accuracy.py
[4]   Terminated: 15          python3.7 test_accuracy.py

[5]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
COUNT: 101000000
COUNT: 102000000
COUNT: 103000000
COUNT: 104000000
COUNT: 105000000
COUNT: 106000000
COUNT: 107000000
COUNT: 108000000
COUNT: 109000000
COUNT: 110000000
COUNT: 111000000
COUNT: 112000000
COUNT: 113000000
COUNT: 114000000
COUNT: 115000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7812.5796229839325
lambda:  0.0001
leaves:  [(1,), (-1, 2), (-2, -1, 7, 9), (-7, -6, -5, -2, -1), (-7, -6, -2, -1, 5), (-7, -3, -2, -1, 6), (-7, -2, -1, 3, 6), (-9, -3, -2, -1, 7), (-9, -2, -1, 3, 7)]
num_captured:  [576, 384, 64, 288, 96, 96, 96, 64, 64]
num_captured_incorrect:  [0, 0, 0, 108, 14, 24, 4, 24, 4]
prediction:  [0, 0, 1, 0, 1, 1, 1, 1, 1]
Objective:  0.10390925925925923
Accuracy:  0.8969907407407408
COUNT of the best tree:  5996979
time when the best tree is achieved:  214.14391088485718
TOTAL COUNT:  115912728
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.0989229679107666
lambda:  0.1
leaves:  [()]
num_captured:  [958]
num_captured_incorrect:  [332]
prediction:  [1]
Objective:  0.4465553235908142
Accuracy:  0.6534446764091858
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  52
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3.5693559646606445
lambda:  0.05
leaves:  [()]
num_captured:  [958]
num_captured_incorrect:  [332]
prediction:  [1]
Objective:  0.3965553235908142
Accuracy:  0.6534446764091858
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  29053
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0002081394196
lambda:  0.025
leaves:  [(2,), (-2, 14), (-14, -13, -2), (-14, -2, 13)]
num_captured:  [458, 246, 92, 162]
num_captured_incorrect:  [92, 95, 0, 53]
prediction:  [1, 1, 0, 1]
Objective:  0.35052192066805843
Accuracy:  0.7494780793319415
COUNT of the best tree:  29817
time when the best tree is achieved:  4.933943033218384
TOTAL COUNT:  17556125
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.001946926117
lambda:  0.01
leaves:  [(2,), (-14, -13, -2), (-2, 11, 13), (-13, -2, 11, 14), (-12, -11, -2, 13), (-11, -2, 12, 13), (-13, -12, -11, -2, 14), (-13, -11, -2, 12, 14)]
num_captured:  [458, 92, 114, 82, 50, 82, 26, 54]
num_captured_incorrect:  [92, 0, 28, 17, 0, 17, 0, 10]
prediction:  [1, 0, 1, 1, 0, 1, 0, 1]
Objective:  0.25118997912317326
Accuracy:  0.8288100208768268
COUNT of the best tree:  24928
time when the best tree is achieved:  1.9809229373931885
TOTAL COUNT:  21354481
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0007050037384
lambda:  0.005
leaves:  [(2,), (-12, -2, 3), (-6, -3, -2, -1), (-14, -3, -2, 6), (-4, -3, -2, 6, 14), (-14, -10, -2, 3, 12), (-10, -2, 3, 12, 14), (-2, 3, 10, 12, 13), (-18, -17, -6, -3, -2, 1), (-16, -6, -3, -2, 1, 18), (-6, -3, -2, 1, 16, 18), (-18, -3, -2, 4, 6, 14), (-3, -2, 4, 6, 14, 18), (-14, -13, -2, 3, 10, 12), (-18, -15, -6, -3, -2, 1, 17), (-18, -6, -3, -2, 1, 15, 17), (-13, -7, -2, 3, 10, 12, 14), (-13, -2, 3, 7, 10, 12, 14)]
num_captured:  [458, 67, 71, 54, 46, 9, 28, 31, 46, 32, 30, 11, 8, 11, 18, 27, 5, 6]
num_captured_incorrect:  [92, 0, 10, 0, 5, 0, 4, 0, 3, 4, 0, 1, 0, 0, 2, 0, 0, 0]
prediction:  [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1]
Objective:  0.21630480167014612
Accuracy:  0.8736951983298539
COUNT of the best tree:  13026094
time when the best tree is achieved:  886.9269621372223
TOTAL COUNT:  27181739
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7200.041049957275
lambda:  0.0005
leaves:  [(2,), (-2, -1, 11), (-12, -11, -2, -1), (-12, -2, 1, 3), (-11, -3, -2, -1, 12), (-11, -3, -2, 1, 4), (-11, -5, -2, -1, 3, 12), (-11, -2, -1, 3, 5, 12), (-6, -5, -4, -3, -2, 1), (-5, -4, -3, -2, 1, 6), (-13, -4, -3, -2, 1, 5), (-4, -3, -2, 1, 5, 13), (-5, -3, -2, 1, 4, 11), (-3, -2, 1, 4, 5, 11), (-8, -5, -2, 1, 3, 12), (-5, -2, 1, 3, 8, 12), (-13, -2, 1, 3, 5, 12), (-2, 1, 3, 5, 12, 13)]
num_captured:  [458, 78, 20, 55, 20, 5, 29, 13, 84, 30, 42, 28, 36, 12, 24, 12, 5, 7]
num_captured_incorrect:  [92, 14, 0, 0, 0, 0, 6, 5, 36, 7, 0, 5, 8, 5, 4, 4, 0, 2]
prediction:  [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1]
Objective:  0.20524217118997914
Accuracy:  0.8037578288100209
COUNT of the best tree:  12085330
time when the best tree is achieved:  754.6513390541077
TOTAL COUNT:  84750321
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.7765700817108154
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4025, 6434]
num_captured_incorrect:  [1086, 2061]
prediction:  [1, 0]
Objective:  0.5008891863466871
Accuracy:  0.6991108136533128
COUNT of the best tree:  1
time when the best tree is achieved:  0.06355786323547363
TOTAL COUNT:  39
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  4.1032938957214355
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4025, 6434]
num_captured_incorrect:  [1086, 2061]
prediction:  [1, 0]
Objective:  0.400889186346687
Accuracy:  0.699110813653313
COUNT of the best tree:  1
time when the best tree is achieved:  0.058179616928100586
TOTAL COUNT:  245
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  21.54723596572876
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [4025, 6434]
num_captured_incorrect:  [1086, 2061]
prediction:  [1, 0]
Objective:  0.35088918634668703
Accuracy:  0.699110813653313
COUNT of the best tree:  1
time when the best tree is achieved:  0.05472683906555176
TOTAL COUNT:  28934
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000038146973
lambda:  0.01
leaves:  [(-1,), (1,)]
num_captured:  [4025, 6434]
num_captured_incorrect:  [1086, 2061]
prediction:  [1, 0]
Objective:  0.32088918634668706
Accuracy:  0.699110813653313
COUNT of the best tree:  1
time when the best tree is achieved:  0.055533647537231445
TOTAL COUNT:  26100161
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000047683716
lambda:  0.005
leaves:  [(-1,), (1,)]
num_captured:  [4025, 6434]
num_captured_incorrect:  [1086, 2061]
prediction:  [1, 0]
Objective:  0.31088918634668705
Accuracy:  0.699110813653313
COUNT of the best tree:  1
time when the best tree is achieved:  0.05579185485839844
TOTAL COUNT:  34404358
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0011310577393
lambda:  0.0025
leaves:  [(2,), (-2, -1), (-13, -2, 1), (-2, 1, 13)]
num_captured:  [4109, 4025, 1037, 1288]
num_captured_incorrect:  [1046, 1086, 487, 465]
prediction:  [0, 1, 1, 0]
Objective:  0.30486566593364567
Accuracy:  0.7051343340663543
COUNT of the best tree:  5059835
time when the best tree is achieved:  239.3957290649414
TOTAL COUNT:  35462276
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0007162094116
lambda:  0.001
leaves:  [(2,), (-17, -2), (-15, -13, -2, 17), (-13, -2, 15, 17), (-2, -1, 13, 17), (-2, 1, 13, 17)]
num_captured:  [4109, 629, 57, 2288, 2167, 1209]
num_captured_incorrect:  [1046, 136, 20, 748, 683, 417]
prediction:  [0, 1, 0, 1, 1, 0]
Objective:  0.2976148771393059
Accuracy:  0.7083851228606941
COUNT of the best tree:  4778507
time when the best tree is achieved:  174.8700931072235
TOTAL COUNT:  40101740
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
COUNT: 92000000
COUNT: 93000000
COUNT: 94000000
COUNT: 95000000
COUNT: 96000000
COUNT: 97000000
COUNT: 98000000
COUNT: 99000000
COUNT: 100000000
COUNT: 101000000
COUNT: 102000000
COUNT: 103000000
COUNT: 104000000
COUNT: 105000000
COUNT: 106000000
COUNT: 107000000
COUNT: 108000000
COUNT: 109000000
COUNT: 110000000
COUNT: 111000000
COUNT: 112000000
COUNT: 113000000
COUNT: 114000000
COUNT: 115000000
COUNT: 116000000
COUNT: 117000000
COUNT: 118000000
COUNT: 119000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7277.297780036926
lambda:  0.0005
leaves:  [(2,), (-17, -2), (-11, -2, 8, 17), (-2, 10, 11, 17), (-15, -11, -9, -8, -2, 17), (-11, -9, -8, -2, 15, 17), (-11, -8, -2, -1, 9, 17), (-11, -8, -2, 1, 9, 17), (-10, -4, -2, -1, 11, 17), (-10, -4, -2, 1, 11, 17), (-10, -2, -1, 4, 11, 17), (-10, -2, 1, 4, 11, 17)]
num_captured:  [4109, 629, 1001, 64, 35, 960, 903, 966, 1128, 569, 32, 63]
num_captured_incorrect:  [1046, 136, 223, 15, 13, 304, 279, 421, 389, 185, 11, 19]
prediction:  [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0]
Objective:  0.2967543742231571
Accuracy:  0.7092456257768429
COUNT of the best tree:  32885402
time when the best tree is achieved:  1398.9300889968872
TOTAL COUNT:  119591538
nrule: 19
ndata: 10459
gr: [0.07953549 0.06464341 0.00597235 0.00747955 0.00470261 0.01945707
 0.01626408 0.01323844 0.00137323 0.01037332 0.02062601 0.02177616
 0.00085004 0.00464642 0.00501294 0.00631144 0.00375051 0.01370964
 0.01910059]
order: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
odr: [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
the order of x's columns:  [0, 1, 11, 10, 5, 18, 6, 17, 7, 9, 3, 15, 2, 14, 4, 13, 16, 8, 12]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
COUNT: 62000000
COUNT: 63000000
COUNT: 64000000
COUNT: 65000000
COUNT: 66000000
COUNT: 67000000
COUNT: 68000000
COUNT: 69000000
COUNT: 70000000
COUNT: 71000000
COUNT: 72000000
COUNT: 73000000
COUNT: 74000000
COUNT: 75000000
COUNT: 76000000
COUNT: 77000000
COUNT: 78000000
COUNT: 79000000
COUNT: 80000000
COUNT: 81000000
COUNT: 82000000
COUNT: 83000000
COUNT: 84000000
COUNT: 85000000
COUNT: 86000000
COUNT: 87000000
COUNT: 88000000
COUNT: 89000000
COUNT: 90000000
COUNT: 91000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7415.28054189682
lambda:  0.0001
leaves:  [(-15,), (-17, -1, 15), (-12, 1, 2, 15), (-5, -3, -1, 15, 17), (-3, -1, 5, 15, 17), (-10, -1, 3, 15, 17), (-1, 3, 10, 15, 17), (-13, -3, -2, 1, 15), (-3, -2, 1, 13, 15), (-17, -2, 1, 3, 15), (-2, 1, 3, 15, 17), (-3, 1, 2, 12, 15), (1, 2, 3, 12, 15)]
num_captured:  [344, 486, 1129, 1437, 1891, 194, 12, 853, 1008, 28, 358, 970, 1749]
num_captured_incorrect:  [74, 87, 203, 446, 471, 69, 3, 381, 368, 9, 130, 269, 527]
prediction:  [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0]
Objective:  0.29167192848264656
Accuracy:  0.7096280715173535
COUNT of the best tree:  5854009
time when the best tree is achieved:  393.09985089302063
TOTAL COUNT:  91456779
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.02862381935119629
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [95, 29]
num_captured_incorrect:  [33, 0]
prediction:  [0, 1]
Objective:  0.4661290322580645
Accuracy:  0.7338709677419355
COUNT of the best tree:  1
time when the best tree is achieved:  0.013630867004394531
TOTAL COUNT:  43
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3210790157318115
lambda:  0.05
leaves:  [(1,), (-7, -2, -1), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7)]
num_captured:  [29, 36, 20, 31, 8]
num_captured_incorrect:  [0, 11, 0, 0, 0]
prediction:  [1, 1, 0, 0, 1]
Objective:  0.33870967741935487
Accuracy:  0.9112903225806451
COUNT of the best tree:  697
time when the best tree is achieved:  0.10813689231872559
TOTAL COUNT:  4747
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  25.40519618988037
lambda:  0.025
leaves:  [(1,), (-10, -1, 9), (-9, -1, 10), (-1, 9, 10), (-10, -9, -7, -2, -1), (-10, -9, -2, -1, 7), (-10, -9, -7, -1, 2), (-10, -9, -1, 2, 7)]
num_captured:  [29, 20, 20, 12, 13, 6, 16, 8]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.2
Accuracy:  1.0
COUNT of the best tree:  4323
time when the best tree is achieved:  0.3050851821899414
TOTAL COUNT:  534514
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  75.6809389591217
lambda:  0.01
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.08
Accuracy:  1.0
COUNT of the best tree:  1250
time when the best tree is achieved:  0.0960378646850586
TOTAL COUNT:  2029943
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  97.47500705718994
lambda:  0.005
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.04
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.11786484718322754
TOTAL COUNT:  2685438
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  96.43367218971252
lambda:  0.0025
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.02
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.11685013771057129
TOTAL COUNT:  2689799
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  96.51604890823364
lambda:  0.001
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.008
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.1184840202331543
TOTAL COUNT:  2687999
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  96.60276079177856
lambda:  0.0005
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.004
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.11983275413513184
TOTAL COUNT:  2685793
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  97.00618696212769
lambda:  0.0001
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.0008
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.11737394332885742
TOTAL COUNT:  2686114
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.009501934051513672
lambda:  0.1
leaves:  [()]
num_captured:  [169]
num_captured_incorrect:  [64]
prediction:  [0]
Objective:  0.47869822485207103
Accuracy:  0.621301775147929
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  29
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3.936367988586426
lambda:  0.05
leaves:  [()]
num_captured:  [169]
num_captured_incorrect:  [64]
prediction:  [0]
Objective:  0.428698224852071
Accuracy:  0.6213017751479291
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  40694
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0001521110535
lambda:  0.025
leaves:  [(-9,), (3, 9), (-5, -3, 9), (-3, 5, 9)]
num_captured:  [86, 40, 31, 12]
num_captured_incorrect:  [31, 9, 9, 2]
prediction:  [0, 0, 1, 0]
Objective:  0.40177514792899405
Accuracy:  0.6982248520710059
COUNT of the best tree:  466
time when the best tree is achieved:  0.12612414360046387
TOTAL COUNT:  15578937
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.000803232193
lambda:  0.01
leaves:  [(1,), (-9, -5, -1), (-9, -1, 5), (-1, 5, 9), (-5, -3, -1, 4, 9), (-5, -1, 3, 4, 9), (-7, -5, -4, -3, -1, 9), (-5, -4, -3, -1, 7, 9), (-7, -5, -4, -1, 3, 9), (-5, -4, -1, 3, 7, 9)]
num_captured:  [54, 42, 14, 14, 9, 12, 5, 8, 9, 2]
num_captured_incorrect:  [15, 10, 3, 2, 0, 0, 0, 0, 0, 0]
prediction:  [0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Objective:  0.2775147928994083
Accuracy:  0.8224852071005917
COUNT of the best tree:  4282
time when the best tree is achieved:  0.26051926612854004
TOTAL COUNT:  19611352
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000340938568
lambda:  0.005
leaves:  [(1,), (-2, -1, 7), (-1, 2, 9), (-9, -7, -1, 2), (-9, -7, -2, -1, 5), (-7, -2, -1, 5, 9), (-9, -1, 2, 3, 7), (-9, -7, -5, -3, -2, -1), (-9, -4, -3, -1, 2, 7), (-9, -3, -1, 2, 4, 7), (-9, -7, -5, -4, -2, -1, 3), (-9, -7, -5, -2, -1, 3, 4), (-7, -5, -4, -3, -2, -1, 9), (-7, -5, -3, -2, -1, 4, 9), (-7, -5, -4, -2, -1, 3, 9), (-7, -5, -2, -1, 3, 4, 9)]
num_captured:  [54, 26, 14, 9, 10, 8, 3, 13, 2, 1, 3, 4, 5, 5, 6, 6]
num_captured_incorrect:  [15, 7, 3, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0]
Objective:  0.2515976331360947
Accuracy:  0.8284023668639053
COUNT of the best tree:  2587738
time when the best tree is achieved:  122.27067112922668
TOTAL COUNT:  31507228
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7200.0106201171875
lambda:  0.0005
leaves:  [(1,), (-2, -1, 7), (-1, 2, 9), (-9, -7, -1, 2), (-7, -3, -2, -1, 11), (-9, -1, 2, 3, 7), (-7, -2, -1, 3, 4, 9), (-9, -4, -3, -1, 2, 7), (-9, -3, -1, 2, 4, 7), (-11, -7, -5, -4, -3, -2, -1), (-11, -7, -4, -3, -2, -1, 5), (-9, -7, -5, -4, -2, -1, 3), (-9, -7, -4, -2, -1, 3, 5), (-9, -7, -5, -2, -1, 3, 4), (-9, -7, -2, -1, 3, 4, 5), (-7, -5, -4, -2, -1, 3, 9), (-7, -4, -2, -1, 3, 5, 9), (-11, -9, -7, -5, -3, -2, -1, 4), (-11, -7, -5, -3, -2, -1, 4, 9), (-11, -9, -7, -3, -2, -1, 4, 5), (-11, -7, -3, -2, -1, 4, 5, 9)]
num_captured:  [54, 26, 14, 9, 8, 3, 7, 2, 1, 7, 1, 3, 7, 4, 1, 6, 3, 4, 5, 2, 2]
num_captured_incorrect:  [15, 7, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0]
Objective:  0.17026331360946748
Accuracy:  0.8402366863905325
COUNT of the best tree:  4595276
time when the best tree is achieved:  404.31834602355957
TOTAL COUNT:  58348354
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.08871006965637207
lambda:  0.1
leaves:  [(2,), (-2, -1), (-2, 1)]
num_captured:  [39, 41, 42]
num_captured_incorrect:  [13, 3, 11]
prediction:  [1, 0, 1]
Objective:  0.521311475409836
Accuracy:  0.778688524590164
COUNT of the best tree:  37
time when the best tree is achieved:  0.015150070190429688
TOTAL COUNT:  189
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.20170187950134277
lambda:  0.05
leaves:  [(2,), (-2, -1), (-2, 1)]
num_captured:  [39, 41, 42]
num_captured_incorrect:  [13, 3, 11]
prediction:  [1, 0, 1]
Objective:  0.37131147540983606
Accuracy:  0.778688524590164
COUNT of the best tree:  67
time when the best tree is achieved:  0.0220339298248291
TOTAL COUNT:  3419
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  743.4959590435028
lambda:  0.025
leaves:  [(1,), (-2, -1), (-1, 2, 3), (-4, -3, -1, 2), (-3, -1, 2, 4)]
num_captured:  [42, 41, 12, 18, 9]
num_captured_incorrect:  [11, 3, 0, 5, 0]
prediction:  [1, 0, 1, 0, 1]
Objective:  0.2807377049180328
Accuracy:  0.8442622950819672
COUNT of the best tree:  83
time when the best tree is achieved:  0.021382808685302734
TOTAL COUNT:  9382356
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0027968883514
lambda:  0.01
leaves:  [(1,), (-2, -1), (-1, 2, 3), (-3, -1, 2, 4), (-7, -4, -3, -1, 2), (-4, -3, -1, 2, 7)]
num_captured:  [42, 41, 12, 9, 12, 6]
num_captured_incorrect:  [11, 3, 0, 0, 0, 1]
prediction:  [1, 0, 1, 1, 0, 1]
Objective:  0.18295081967213114
Accuracy:  0.8770491803278688
COUNT of the best tree:  109
time when the best tree is achieved:  0.028396129608154297
TOTAL COUNT:  29495297
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0014281272888
lambda:  0.005
leaves:  [(1,), (-10, -2, -1), (-1, 2, 3), (-11, -2, -1, 10), (-3, -1, 2, 4), (-8, -2, -1, 10, 11), (-2, -1, 8, 10, 11), (-7, -4, -3, -1, 2), (-4, -3, -1, 2, 7)]
num_captured:  [42, 27, 12, 9, 9, 3, 2, 12, 6]
num_captured_incorrect:  [11, 0, 0, 0, 0, 0, 0, 0, 1]
prediction:  [1, 0, 1, 0, 1, 1, 0, 0, 1]
Objective:  0.1433606557377049
Accuracy:  0.9016393442622951
COUNT of the best tree:  1348610
time when the best tree is achieved:  59.323246002197266
TOTAL COUNT:  38190791
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0005676746368
lambda:  0.0025
leaves:  [(1,), (-2, -1, 4), (-1, 2, 4), (-4, -2, -1, 3), (-4, -1, 2, 3), (-10, -4, -3, -2, -1), (-4, -3, -1, 8, 10), (-10, -7, -4, -3, -1, 2), (-10, -4, -3, -1, 2, 7), (-8, -6, -4, -3, -1, 10), (-8, -7, -4, -3, -1, 6, 10), (-8, -4, -3, -1, 6, 7, 10)]
num_captured:  [42, 9, 9, 10, 12, 16, 5, 8, 4, 3, 3, 1]
num_captured_incorrect:  [11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1]
Objective:  0.12016393442622951
Accuracy:  0.9098360655737705
COUNT of the best tree:  231941
time when the best tree is achieved:  10.164220809936523
TOTAL COUNT:  39870926
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0003139972687
lambda:  0.001
leaves:  [(1,), (-2, -1, 4), (-1, 2, 4), (-5, -4, -2, -1), (-5, -4, -1, 2, 3), (-4, -2, -1, 3, 5), (-4, -1, 2, 3, 5), (-7, -5, -4, -3, -1, 2), (-5, -4, -3, -1, 2, 7), (-10, -8, -4, -3, -1, 5), (-7, -4, -3, -1, 5, 8), (-8, -6, -4, -3, -1, 5, 10), (-11, -4, -3, -1, 5, 7, 8), (-4, -3, -1, 5, 7, 8, 11), (-8, -7, -4, -3, -1, 5, 6, 10), (-8, -4, -3, -1, 5, 6, 7, 10)]
num_captured:  [42, 9, 9, 15, 6, 7, 6, 7, 3, 5, 5, 2, 1, 2, 2, 1]
num_captured_incorrect:  [11, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.11436065573770492
Accuracy:  0.9016393442622951
COUNT of the best tree:  87506
time when the best tree is achieved:  6.9597790241241455
TOTAL COUNT:  22982823
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
COUNT: 49000000
COUNT: 50000000
COUNT: 51000000
COUNT: 52000000
COUNT: 53000000
COUNT: 54000000
COUNT: 55000000
COUNT: 56000000
COUNT: 57000000
COUNT: 58000000
COUNT: 59000000
COUNT: 60000000
COUNT: 61000000
^Z[5]   Terminated: 15          python3.7 test_accuracy.py

[6]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$
  [Restored Jan 15, 2019 at 1:08:04 PM]
Last login: Tue Jan 15 13:08:04 on ttys000
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7.61348819732666
lambda:  0.1
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.5040443637058992
Accuracy:  0.6959556362941008
COUNT of the best tree:  2
time when the best tree is achieved:  0.10469412803649902
TOTAL COUNT:  234
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  24.717172145843506
lambda:  0.05
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.40404436370589925
Accuracy:  0.6959556362941007
COUNT of the best tree:  4
time when the best tree is achieved:  0.1083822250366211
TOTAL COUNT:  8526
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1597.703626871109
lambda:  0.025
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.3540443637058992
Accuracy:  0.6959556362941008
COUNT of the best tree:  4
time when the best tree is achieved:  0.10052180290222168
TOTAL COUNT:  18030958
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0001032352448
lambda:  0.01
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.32404436370589923
Accuracy:  0.6959556362941008
COUNT of the best tree:  4
time when the best tree is achieved:  0.1006162166595459
TOTAL COUNT:  26631341
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1904.9907729625702
lambda:  0.005
leaves:  [(-4,), (-9, -1, 4), (-9, 1, 4), (-2, 4, 9), (2, 4, 9)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.313650922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  3295255
time when the best tree is achieved:  234.57473492622375
TOTAL COUNT:  42511825
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
COUNT: 47000000
COUNT: 48000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0010051727295
lambda:  0.0025
leaves:  [(-4,), (-9, -1, 4), (-9, 1, 4), (-2, 4, 9), (2, 4, 9)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.301150922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  14105859
time when the best tree is achieved:  502.84108805656433
TOTAL COUNT:  48213004
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0022797584534
lambda:  0.001
leaves:  [(-4,), (1, 4, 9), (-20, -16, -1, 4), (-20, -1, 4, 16), (-2, -1, 4, 20), (-1, 2, 4, 20), (-12, -9, 1, 4), (-9, 1, 4, 12)]
num_captured:  [2178, 1687, 1969, 179, 1621, 818, 297, 1710]
num_captured_incorrect:  [394, 279, 583, 75, 683, 330, 141, 511]
prediction:  [0, 1, 0, 1, 0, 1, 0, 1]
Objective:  0.29445185964241327
Accuracy:  0.7135481403575867
COUNT of the best tree:  1432163
time when the best tree is achieved:  60.37220597267151
TOTAL COUNT:  30531602
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0080771446228
lambda:  0.0005
leaves:  [(-4,), (1, 4, 9), (-20, -16, -1, 4), (-20, -1, 4, 16), (-2, -1, 4, 20), (-1, 2, 4, 20), (-12, -9, 1, 4), (-9, 1, 4, 12)]
num_captured:  [2178, 1687, 1969, 179, 1621, 818, 297, 1710]
num_captured_incorrect:  [394, 279, 583, 75, 683, 330, 141, 511]
prediction:  [0, 1, 0, 1, 0, 1, 0, 1]
Objective:  0.29045185964241327
Accuracy:  0.7135481403575867
COUNT of the best tree:  3777547
time when the best tree is achieved:  131.5487060546875
TOTAL COUNT:  31394010
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.014622926712
lambda:  0.0001
leaves:  [(-4,), (1, 4, 16), (-21, -12, -1, 4), (-12, -2, -1, 4, 21), (-12, -1, 2, 4, 21), (-5, -2, -1, 4, 12), (-2, -1, 4, 5, 12), (-9, -1, 2, 4, 12), (-1, 2, 4, 9, 12), (-16, -14, -3, 1, 4), (-16, -3, 1, 4, 14), (-16, -10, 1, 3, 4), (-16, 1, 3, 4, 10)]
num_captured:  [2178, 814, 119, 739, 354, 876, 1272, 805, 422, 56, 1110, 5, 1709]
num_captured_incorrect:  [394, 118, 17, 194, 133, 281, 553, 376, 118, 19, 395, 1, 392]
prediction:  [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]
Objective:  0.28727380246677503
Accuracy:  0.7140261975332249
COUNT of the best tree:  1295791
time when the best tree is achieved:  63.6725959777832
TOTAL COUNT:  26834766
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3198893070220947
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.039797067642211914
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.34026288986206055
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.040296077728271484
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.6135480403900146
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.03897500038146973
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  17.896420001983643
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [2174, 414, 4319]
num_captured_incorrect:  [736, 151, 1495]
prediction:  [1, 1, 0]
Objective:  0.37486752569856663
Accuracy:  0.6551324743014334
COUNT of the best tree:  3601
time when the best tree is achieved:  4.263540267944336
TOTAL COUNT:  20646
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  59.196744203567505
lambda:  0.005
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.35596858259736497
Accuracy:  0.669031417402635
COUNT of the best tree:  18195
time when the best tree is achieved:  15.112471103668213
TOTAL COUNT:  241306
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000100135803
lambda:  0.0025
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.34346858259736496
Accuracy:  0.669031417402635
COUNT of the best tree:  3249198
time when the best tree is achieved:  188.78356099128723
TOTAL COUNT:  30667789
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0004258155823
lambda:  0.001
leaves:  [(-6,), (2, 6), (-11, -2, 6, 7), (-2, 6, 9, 11), (-11, -7, -2, -1, 6), (-11, -7, -2, 1, 6), (-10, -9, -2, 6, 11), (-9, -2, 6, 10, 11)]
num_captured:  [275, 2101, 827, 262, 840, 1604, 845, 153]
num_captured_incorrect:  [68, 609, 247, 71, 331, 596, 299, 62]
prediction:  [1, 0, 1, 0, 0, 1, 0, 1]
Objective:  0.3385342406254525
Accuracy:  0.6694657593745474
COUNT of the best tree:  7012200
time when the best tree is achieved:  292.1658229827881
TOTAL COUNT:  39748920
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.00932097435
lambda:  0.0005
leaves:  [(-6,), (-4, 6), (-5, -1, 4, 6), (-3, 1, 4, 6), (-12, -3, -1, 4, 5, 6), (-12, -1, 3, 4, 5, 6), (-7, -1, 4, 5, 6, 12), (-1, 4, 5, 6, 7, 12), (-9, -5, 1, 3, 4, 6), (-9, 1, 3, 4, 5, 6), (-5, 1, 3, 4, 6, 9), (1, 3, 4, 5, 6, 9)]
num_captured:  [275, 330, 810, 128, 140, 2581, 619, 379, 344, 1064, 49, 188]
num_captured_incorrect:  [68, 90, 176, 26, 60, 854, 265, 137, 157, 369, 20, 60]
prediction:  [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1]
Objective:  0.33638945996814823
Accuracy:  0.6696105400318517
COUNT of the best tree:  97108
time when the best tree is achieved:  8.844457864761353
TOTAL COUNT:  25748182
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0863201618195
lambda:  0.0001
leaves:  [(-6,), (-5, -1, 6), (1, 6, 8), (-8, -5, -4, 1, 6), (-8, -3, 1, 4, 6), (-9, -7, -4, -1, 5, 6), (-7, -4, -1, 5, 6, 9), (-11, -7, -1, 4, 5, 6), (-7, -1, 4, 5, 6, 11), (-12, -10, -1, 5, 6, 7), (-10, -1, 5, 6, 7, 12), (-9, -1, 5, 6, 7, 10), (-1, 5, 6, 7, 9, 10), (-9, -8, -4, 1, 5, 6), (-8, -4, 1, 5, 6, 9), (-8, -7, 1, 3, 4, 6), (-8, 1, 3, 4, 6, 7)]
num_captured:  [275, 810, 109, 1, 106, 12, 2, 1528, 536, 800, 349, 504, 108, 156, 21, 1401, 189]
num_captured_incorrect:  [68, 176, 21, 0, 22, 4, 0, 497, 170, 285, 126, 208, 45, 38, 8, 547, 54]
prediction:  [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1]
Objective:  0.3302073114231938
Accuracy:  0.6714926885768062
COUNT of the best tree:  11613892
time when the best tree is achieved:  1025.9457850456238
TOTAL COUNT:  16700475
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.32721424102783203
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.041947126388549805
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.33314990997314453
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.04089975357055664
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
if ( x1 <= 0.5 ) {
    return [[2975. 1758.]]
    return 0 0  ( 2975 examples )
    return 1 1  ( 1758 examples )
}
else {
    return [[ 736. 1438.]]
    return 0 0  ( 736 examples )
    return 1 1  ( 1438 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.597015857696533
lambda:  0.025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  17.82747197151184
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [2174, 414, 4319]
num_captured_incorrect:  [736, 151, 1495]
prediction:  [1, 1, 0]
Objective:  0.37486752569856663
Accuracy:  0.6551324743014334
COUNT of the best tree:  3601
time when the best tree is achieved:  4.140357971191406
TOTAL COUNT:  20646
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  55.650978088378906
lambda:  0.005
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.35596858259736497
Accuracy:  0.669031417402635
COUNT of the best tree:  16001
time when the best tree is achieved:  13.627646923065186
TOTAL COUNT:  232402
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000100135803
lambda:  0.0025
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.34346858259736496
Accuracy:  0.669031417402635
COUNT of the best tree:  3016865
time when the best tree is achieved:  165.32545590400696
TOTAL COUNT:  31560993
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0032770633698
lambda:  0.001
leaves:  [(-6,), (2, 6), (-11, -2, 6, 7), (-2, 6, 9, 11), (-11, -7, -2, -1, 6), (-11, -7, -2, 1, 6), (-10, -9, -2, 6, 11), (-9, -2, 6, 10, 11)]
num_captured:  [275, 2101, 827, 262, 840, 1604, 845, 153]
num_captured_incorrect:  [68, 609, 247, 71, 331, 596, 299, 62]
prediction:  [1, 0, 1, 0, 0, 1, 0, 1]
Objective:  0.3385342406254525
Accuracy:  0.6694657593745474
COUNT of the best tree:  7012200
time when the best tree is achieved:  278.35013699531555
TOTAL COUNT:  39700395
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.018676996231
lambda:  0.0005
leaves:  [(-6,), (-4, 6), (-5, -1, 4, 6), (-3, 1, 4, 6), (-12, -3, -1, 4, 5, 6), (-12, -1, 3, 4, 5, 6), (-7, -1, 4, 5, 6, 12), (-1, 4, 5, 6, 7, 12), (-9, -5, 1, 3, 4, 6), (-9, 1, 3, 4, 5, 6), (-5, 1, 3, 4, 6, 9), (1, 3, 4, 5, 6, 9)]
num_captured:  [275, 330, 810, 128, 140, 2581, 619, 379, 344, 1064, 49, 188]
num_captured_incorrect:  [68, 90, 176, 26, 60, 854, 265, 137, 157, 369, 20, 60]
prediction:  [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1]
Objective:  0.33638945996814823
Accuracy:  0.6696105400318517
COUNT of the best tree:  97108
time when the best tree is achieved:  8.744765996932983
TOTAL COUNT:  25831342
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
if ( x1 <= 0.5 ) {
    if ( x7 <= 0.5 ) {
        if ( x12 <= 0.5 ) {
            if ( x5 <= 0.5 ) {
                if ( x11 <= 0.5 ) {
                    return [[309.  61.]]
                    return 0 0  ( 309 examples )
                    return 1 1  ( 61 examples )
                }
                else {
                    return [[176.  53.]]
                    return 0 0  ( 176 examples )
                    return 1 1  ( 53 examples )
                }
            }
            else {
                if ( x11 <= 0.5 ) {
                    return [[677. 232.]]
                    return 0 0  ( 677 examples )
                    return 1 1  ( 232 examples )
                }
                else {
                    if ( x4 <= 0.5 ) {
                        return [[4. 0.]]
                        return 0 0  ( 4 examples )
                    }
                    else {
                        if ( x6 <= 0.5 ) {
                            return [[1. 2.]]
                            return 0 0  ( 1 examples )
                            return 1 1  ( 2 examples )
                        }
                        else {
                            return [[366. 170.]]
                            return 0 0  ( 366 examples )
                            return 1 1  ( 170 examples )
                        }
                    }
                }
            }
        }
        else {
            if ( x5 <= 0.5 ) {
                return [[149.  62.]]
                return 0 0  ( 149 examples )
                return 1 1  ( 62 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    return [[1. 6.]]
                    return 0 0  ( 1 examples )
                    return 1 1  ( 6 examples )
                }
                else {
                    return [[360. 269.]]
                    return 0 0  ( 360 examples )
                    return 1 1  ( 269 examples )
                }
            }
        }
    }
    else {
        if ( x12 <= 0.5 ) {
            if ( x10 <= 0.5 ) {
                if ( x9 <= 0.5 ) {
                    if ( x2 <= 0.5 ) {
                        if ( x3 <= 0.5 ) {
                            if ( x4 <= 0.5 ) {
                                return [[5. 3.]]
                                return 0 0  ( 5 examples )
                                return 1 1  ( 3 examples )
                            }
                            else {
                                return [[11. 22.]]
                                return 0 0  ( 11 examples )
                                return 1 1  ( 22 examples )
                            }
                        }
                        else {
                            return [[116. 101.]]
                            return 0 0  ( 116 examples )
                            return 1 1  ( 101 examples )
                        }
                    }
                    else {
                        if ( x8 <= 0.5 ) {
                            return [[129.  50.]]
                            return 0 0  ( 129 examples )
                            return 1 1  ( 50 examples )
                        }
                        else {
                            if ( x3 <= 0.5 ) {
                                return [[2. 8.]]
                                return 0 0  ( 2 examples )
                                return 1 1  ( 8 examples )
                            }
                            else {
                                return [[106.  66.]]
                                return 0 0  ( 106 examples )
                                return 1 1  ( 66 examples )
                            }
                        }
                    }
                }
                else {
                    return [[148.  38.]]
                    return 0 0  ( 148 examples )
                    return 1 1  ( 38 examples )
                }
            }
            else {
                if ( x3 <= 0.5 ) {
                    if ( x6 <= 0.5 ) {
                        return [[ 7. 27.]]
                        return 0 0  ( 7 examples )
                        return 1 1  ( 27 examples )
                    }
                    else {
                        return [[37. 65.]]
                        return 0 0  ( 37 examples )
                        return 1 1  ( 65 examples )
                    }
                }
                else {
                    if ( x9 <= 0.5 ) {
                        return [[154. 172.]]
                        return 0 0  ( 154 examples )
                        return 1 1  ( 172 examples )
                    }
                    else {
                        return [[53. 32.]]
                        return 0 0  ( 53 examples )
                        return 1 1  ( 32 examples )
                    }
                }
            }
        }
        else {
            if ( x8 <= 0.5 ) {
                if ( x4 <= 0.5 ) {
                    return [[ 3. 10.]]
                    return 0 0  ( 3 examples )
                    return 1 1  ( 10 examples )
                }
                else {
                    if ( x3 <= 0.5 ) {
                        if ( x9 <= 0.5 ) {
                            return [[10.  9.]]
                            return 0 0  ( 10 examples )
                            return 1 1  ( 9 examples )
                        }
                        else {
                            return [[2. 0.]]
                            return 0 0  ( 2 examples )
                        }
                    }
                    else {
                        return [[ 73. 100.]]
                        return 0 0  ( 73 examples )
                        return 1 1  ( 100 examples )
                    }
                }
            }
            else {
                if ( x9 <= 0.5 ) {
                    return [[ 57. 174.]]
                    return 0 0  ( 57 examples )
                    return 1 1  ( 174 examples )
                }
                else {
                    if ( x4 <= 0.5 ) {
                        return [[6. 4.]]
                        return 0 0  ( 6 examples )
                        return 1 1  ( 4 examples )
                    }
                    else {
                        return [[13. 22.]]
                        return 0 0  ( 13 examples )
                        return 1 1  ( 22 examples )
                    }
                }
            }
        }
    }
}
else {
    if ( x3 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x9 <= 0.5 ) {
                return [[ 95. 312.]]
                return 0 0  ( 95 examples )
                return 1 1  ( 312 examples )
            }
            else {
                return [[15. 25.]]
                return 0 0  ( 15 examples )
                return 1 1  ( 25 examples )
            }
        }
        else {
            return [[11. 71.]]
            return 0 0  ( 11 examples )
            return 1 1  ( 71 examples )
        }
    }
    else {
        if ( x5 <= 0.5 ) {
            if ( x9 <= 0.5 ) {
                return [[157. 187.]]
                return 0 0  ( 157 examples )
                return 1 1  ( 187 examples )
            }
            else {
                return [[29. 20.]]
                return 0 0  ( 29 examples )
                return 1 1  ( 20 examples )
            }
        }
        else {
            if ( x7 <= 0.5 ) {
                return [[361. 647.]]
                return 0 0  ( 361 examples )
                return 1 1  ( 647 examples )
            }
            else {
                if ( x10 <= 0.5 ) {
                    return [[ 67. 165.]]
                    return 0 0  ( 67 examples )
                    return 1 1  ( 165 examples )
                }
                else {
                    return [[ 1. 11.]]
                    return 0 0  ( 1 examples )
                    return 1 1  ( 11 examples )
                }
            }
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0735349655151
lambda:  0.0001
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.32722954973215573
Accuracy:  0.6762704502678443
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  17820462
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
return [[1210.  518.]]
return 0 0  ( 1210 examples )
return 1 1  ( 518 examples )
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.11800694465637207
lambda:  0.1
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.39976851851851847
Accuracy:  0.7002314814814815
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  25
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
if ( x2 <= 0.5 ) {
    if ( x1 <= 0.5 ) {
        return [[250. 518.]]
        return 0 0  ( 250 examples )
        return 1 1  ( 518 examples )
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.9551453590393066
lambda:  0.05
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.29467592592592595
Accuracy:  0.8553240740740741
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  2252
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
if ( x1 <= 0.5 ) {
    if ( x2 <= 0.5 ) {
        return [[250. 518.]]
        return 0 0  ( 250 examples )
        return 1 1  ( 518 examples )
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  300.85323905944824
lambda:  0.025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.21967592592592594
Accuracy:  0.8553240740740741
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  4293385
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
if ( x2 <= 0.5 ) {
    if ( x1 <= 0.5 ) {
        if ( x5 <= 0.5 ) {
            if ( x8 <= 0.5 ) {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        return [[156.  36.]]
                        return 0 0  ( 156 examples )
                        return 1 1  ( 36 examples )
                    }
                    else {
                        return [[24. 72.]]
                        return 0 0  ( 24 examples )
                        return 1 1  ( 72 examples )
                    }
                }
                else {
                    return [[24. 72.]]
                    return 0 0  ( 24 examples )
                    return 1 1  ( 72 examples )
                }
            }
            else {
                return [[ 28. 164.]]
                return 0 0  ( 28 examples )
                return 1 1  ( 164 examples )
            }
        }
        else {
            return [[ 18. 174.]]
            return 0 0  ( 18 examples )
            return 1 1  ( 174 examples )
        }
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0004208087921
lambda:  0.01
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.14523148148148152
Accuracy:  0.9247685185185185
COUNT of the best tree:  0
time when the best tree is achieved:  0
TOTAL COUNT:  14640781
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
^Z
[1]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3189859390258789
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.041246891021728516
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3373391628265381
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.042382240295410156
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
if ( x1 <= 0.5 ) {
    return [[2975. 1758.]]
    return 0 0  ( 2975 examples )
    return 1 1  ( 1758 examples )
}
else {
    return [[ 736. 1438.]]
    return 0 0  ( 736 examples )
    return 1 1  ( 1438 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.5062477588653564
lambda:  0.025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  0
time when the best tree is achieved:  0.01169586181640625
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  17.226641178131104
lambda:  0.01
leaves:  [(1,), (-3, -1), (-1, 3)]
num_captured:  [2174, 414, 4319]
num_captured_incorrect:  [736, 151, 1495]
prediction:  [1, 1, 0]
Objective:  0.37486752569856663
Accuracy:  0.6551324743014334
COUNT of the best tree:  3601
time when the best tree is achieved:  4.0768749713897705
TOTAL COUNT:  20646
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  54.79516100883484
lambda:  0.005
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.35596858259736497
Accuracy:  0.669031417402635
COUNT of the best tree:  16001
time when the best tree is achieved:  13.459686994552612
TOTAL COUNT:  232402
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0002541542053
lambda:  0.0025
leaves:  [(1,), (-7, -1), (-1, 7, 12), (-12, -3, -1, 7), (-12, -1, 3, 7)]
num_captured:  [2174, 2898, 483, 205, 1147]
num_captured_incorrect:  [736, 855, 164, 76, 455]
prediction:  [1, 0, 1, 1, 0]
Objective:  0.34346858259736496
Accuracy:  0.669031417402635
COUNT of the best tree:  3016865
time when the best tree is achieved:  165.5634160041809
TOTAL COUNT:  31544421
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.006117105484
lambda:  0.001
leaves:  [(-6,), (2, 6), (-11, -2, 6, 7), (-2, 6, 9, 11), (-11, -7, -2, -1, 6), (-11, -7, -2, 1, 6), (-10, -9, -2, 6, 11), (-9, -2, 6, 10, 11)]
num_captured:  [275, 2101, 827, 262, 840, 1604, 845, 153]
num_captured_incorrect:  [68, 609, 247, 71, 331, 596, 299, 62]
prediction:  [1, 0, 1, 0, 0, 1, 0, 1]
Objective:  0.3385342406254525
Accuracy:  0.6694657593745474
COUNT of the best tree:  7012200
time when the best tree is achieved:  277.88089203834534
TOTAL COUNT:  40627623
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0404078960419
lambda:  0.0005
leaves:  [(-6,), (-4, 6), (-5, -1, 4, 6), (-3, 1, 4, 6), (-12, -3, -1, 4, 5, 6), (-12, -1, 3, 4, 5, 6), (-7, -1, 4, 5, 6, 12), (-1, 4, 5, 6, 7, 12), (-9, -5, 1, 3, 4, 6), (-9, 1, 3, 4, 5, 6), (-5, 1, 3, 4, 6, 9), (1, 3, 4, 5, 6, 9)]
num_captured:  [275, 330, 810, 128, 140, 2581, 619, 379, 344, 1064, 49, 188]
num_captured_incorrect:  [68, 90, 176, 26, 60, 854, 265, 137, 157, 369, 20, 60]
prediction:  [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1]
Objective:  0.33638945996814823
Accuracy:  0.6696105400318517
COUNT of the best tree:  97108
time when the best tree is achieved:  8.670076847076416
TOTAL COUNT:  26034112
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
if ( x1 <= 0.5 ) {
    if ( x7 <= 0.5 ) {
        if ( x12 <= 0.5 ) {
            if ( x5 <= 0.5 ) {
                if ( x2 <= 0.5 ) {
                    return [[176.  53.]]
                    return 0 0  ( 176 examples )
                    return 1 1  ( 53 examples )
                }
                else {
                    return [[309.  61.]]
                    return 0 0  ( 309 examples )
                    return 1 1  ( 61 examples )
                }
            }
            else {
                if ( x11 <= 0.5 ) {
                    return [[677. 232.]]
                    return 0 0  ( 677 examples )
                    return 1 1  ( 232 examples )
                }
                else {
                    if ( x4 <= 0.5 ) {
                        return [[4. 0.]]
                        return 0 0  ( 4 examples )
                    }
                    else {
                        if ( x6 <= 0.5 ) {
                            return [[1. 2.]]
                            return 0 0  ( 1 examples )
                            return 1 1  ( 2 examples )
                        }
                        else {
                            return [[366. 170.]]
                            return 0 0  ( 366 examples )
                            return 1 1  ( 170 examples )
                        }
                    }
                }
            }
        }
        else {
            if ( x5 <= 0.5 ) {
                return [[149.  62.]]
                return 0 0  ( 149 examples )
                return 1 1  ( 62 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    return [[1. 6.]]
                    return 0 0  ( 1 examples )
                    return 1 1  ( 6 examples )
                }
                else {
                    return [[360. 269.]]
                    return 0 0  ( 360 examples )
                    return 1 1  ( 269 examples )
                }
            }
        }
    }
    else {
        if ( x12 <= 0.5 ) {
            if ( x10 <= 0.5 ) {
                if ( x9 <= 0.5 ) {
                    if ( x11 <= 0.5 ) {
                        if ( x8 <= 0.5 ) {
                            return [[129.  50.]]
                            return 0 0  ( 129 examples )
                            return 1 1  ( 50 examples )
                        }
                        else {
                            if ( x3 <= 0.5 ) {
                                return [[2. 8.]]
                                return 0 0  ( 2 examples )
                                return 1 1  ( 8 examples )
                            }
                            else {
                                return [[106.  66.]]
                                return 0 0  ( 106 examples )
                                return 1 1  ( 66 examples )
                            }
                        }
                    }
                    else {
                        if ( x3 <= 0.5 ) {
                            if ( x4 <= 0.5 ) {
                                return [[5. 3.]]
                                return 0 0  ( 5 examples )
                                return 1 1  ( 3 examples )
                            }
                            else {
                                return [[11. 22.]]
                                return 0 0  ( 11 examples )
                                return 1 1  ( 22 examples )
                            }
                        }
                        else {
                            return [[116. 101.]]
                            return 0 0  ( 116 examples )
                            return 1 1  ( 101 examples )
                        }
                    }
                }
                else {
                    return [[148.  38.]]
                    return 0 0  ( 148 examples )
                    return 1 1  ( 38 examples )
                }
            }
            else {
                if ( x3 <= 0.5 ) {
                    if ( x6 <= 0.5 ) {
                        return [[ 7. 27.]]
                        return 0 0  ( 7 examples )
                        return 1 1  ( 27 examples )
                    }
                    else {
                        return [[37. 65.]]
                        return 0 0  ( 37 examples )
                        return 1 1  ( 65 examples )
                    }
                }
                else {
                    if ( x9 <= 0.5 ) {
                        return [[154. 172.]]
                        return 0 0  ( 154 examples )
                        return 1 1  ( 172 examples )
                    }
                    else {
                        return [[53. 32.]]
                        return 0 0  ( 53 examples )
                        return 1 1  ( 32 examples )
                    }
                }
            }
        }
        else {
            if ( x8 <= 0.5 ) {
                if ( x4 <= 0.5 ) {
                    return [[ 3. 10.]]
                    return 0 0  ( 3 examples )
                    return 1 1  ( 10 examples )
                }
                else {
                    if ( x3 <= 0.5 ) {
                        if ( x9 <= 0.5 ) {
                            return [[10.  9.]]
                            return 0 0  ( 10 examples )
                            return 1 1  ( 9 examples )
                        }
                        else {
                            return [[2. 0.]]
                            return 0 0  ( 2 examples )
                        }
                    }
                    else {
                        return [[ 73. 100.]]
                        return 0 0  ( 73 examples )
                        return 1 1  ( 100 examples )
                    }
                }
            }
            else {
                if ( x9 <= 0.5 ) {
                    return [[ 57. 174.]]
                    return 0 0  ( 57 examples )
                    return 1 1  ( 174 examples )
                }
                else {
                    if ( x4 <= 0.5 ) {
                        return [[6. 4.]]
                        return 0 0  ( 6 examples )
                        return 1 1  ( 4 examples )
                    }
                    else {
                        return [[13. 22.]]
                        return 0 0  ( 13 examples )
                        return 1 1  ( 22 examples )
                    }
                }
            }
        }
    }
}
else {
    if ( x3 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x9 <= 0.5 ) {
                return [[ 95. 312.]]
                return 0 0  ( 95 examples )
                return 1 1  ( 312 examples )
            }
            else {
                return [[15. 25.]]
                return 0 0  ( 15 examples )
                return 1 1  ( 25 examples )
            }
        }
        else {
            return [[11. 71.]]
            return 0 0  ( 11 examples )
            return 1 1  ( 71 examples )
        }
    }
    else {
        if ( x5 <= 0.5 ) {
            if ( x9 <= 0.5 ) {
                return [[157. 187.]]
                return 0 0  ( 157 examples )
                return 1 1  ( 187 examples )
            }
            else {
                return [[29. 20.]]
                return 0 0  ( 29 examples )
                return 1 1  ( 20 examples )
            }
        }
        else {
            if ( x7 <= 0.5 ) {
                return [[361. 647.]]
                return 0 0  ( 361 examples )
                return 1 1  ( 647 examples )
            }
            else {
                if ( x10 <= 0.5 ) {
                    return [[ 67. 165.]]
                    return 0 0  ( 67 examples )
                    return 1 1  ( 165 examples )
                }
                else {
                    return [[ 1. 11.]]
                    return 0 0  ( 1 examples )
                    return 1 1  ( 11 examples )
                }
            }
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0915279388428
lambda:  0.0001
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.32722954973215573
Accuracy:  0.6762704502678443
COUNT of the best tree:  0
time when the best tree is achieved:  0.012957096099853516
TOTAL COUNT:  18323715
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
return [[1210.  518.]]
return 0 0  ( 1210 examples )
return 1 1  ( 518 examples )
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.11599588394165039
lambda:  0.1
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.39976851851851847
Accuracy:  0.7002314814814815
COUNT of the best tree:  0
time when the best tree is achieved:  0.003634929656982422
TOTAL COUNT:  25
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
if ( x1 <= 0.5 ) {
    if ( x2 <= 0.5 ) {
        return [[250. 518.]]
        return 0 0  ( 250 examples )
        return 1 1  ( 518 examples )
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1.8850269317626953
lambda:  0.05
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.29467592592592595
Accuracy:  0.8553240740740741
COUNT of the best tree:  0
time when the best tree is achieved:  0.004102230072021484
TOTAL COUNT:  2252
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
if ( x2 <= 0.5 ) {
    if ( x1 <= 0.5 ) {
        return [[250. 518.]]
        return 0 0  ( 250 examples )
        return 1 1  ( 518 examples )
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  286.5350019931793
lambda:  0.025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.21967592592592594
Accuracy:  0.8553240740740741
COUNT of the best tree:  0
time when the best tree is achieved:  0.004477739334106445
TOTAL COUNT:  4293385
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
if ( x1 <= 0.5 ) {
    if ( x2 <= 0.5 ) {
        if ( x5 <= 0.5 ) {
            if ( x8 <= 0.5 ) {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        return [[156.  36.]]
                        return 0 0  ( 156 examples )
                        return 1 1  ( 36 examples )
                    }
                    else {
                        return [[24. 72.]]
                        return 0 0  ( 24 examples )
                        return 1 1  ( 72 examples )
                    }
                }
                else {
                    return [[24. 72.]]
                    return 0 0  ( 24 examples )
                    return 1 1  ( 72 examples )
                }
            }
            else {
                return [[ 28. 164.]]
                return 0 0  ( 28 examples )
                return 1 1  ( 164 examples )
            }
        }
        else {
            return [[ 18. 174.]]
            return 0 0  ( 18 examples )
            return 1 1  ( 174 examples )
        }
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.000009059906
lambda:  0.01
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.14523148148148152
Accuracy:  0.9247685185185185
COUNT of the best tree:  0
time when the best tree is achieved:  0.003607034683227539
TOTAL COUNT:  15161931
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
if ( x2 <= 0.5 ) {
    if ( x1 <= 0.5 ) {
        if ( x5 <= 0.5 ) {
            if ( x8 <= 0.5 ) {
                if ( x7 <= 0.5 ) {
                    if ( x6 <= 0.5 ) {
                        if ( x12 <= 0.5 ) {
                            return [[96.  0.]]
                            return 0 0  ( 96 examples )
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                return [[48.  0.]]
                                return 0 0  ( 48 examples )
                            }
                            else {
                                return [[12. 36.]]
                                return 0 0  ( 12 examples )
                                return 1 1  ( 36 examples )
                            }
                        }
                    }
                    else {
                        return [[24. 72.]]
                        return 0 0  ( 24 examples )
                        return 1 1  ( 72 examples )
                    }
                }
                else {
                    return [[24. 72.]]
                    return 0 0  ( 24 examples )
                    return 1 1  ( 72 examples )
                }
            }
            else {
                return [[ 28. 164.]]
                return 0 0  ( 28 examples )
                return 1 1  ( 164 examples )
            }
        }
        else {
            return [[ 18. 174.]]
            return 0 0  ( 18 examples )
            return 1 1  ( 174 examples )
        }
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0016191005707
lambda:  0.005
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.10634259259259256
Accuracy:  0.9386574074074074
COUNT of the best tree:  0
time when the best tree is achieved:  0.0037262439727783203
TOTAL COUNT:  28871830
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
if ( x2 <= 0.5 ) {
    if ( x1 <= 0.5 ) {
        if ( x5 <= 0.5 ) {
            if ( x8 <= 0.5 ) {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        if ( x12 <= 0.5 ) {
                            return [[96.  0.]]
                            return 0 0  ( 96 examples )
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                return [[48.  0.]]
                                return 0 0  ( 48 examples )
                            }
                            else {
                                return [[12. 36.]]
                                return 0 0  ( 12 examples )
                                return 1 1  ( 36 examples )
                            }
                        }
                    }
                    else {
                        if ( x3 <= 0.5 ) {
                            if ( x9 <= 0.5 ) {
                                if ( x14 <= 0.5 ) {
                                    return [[16.  0.]]
                                    return 0 0  ( 16 examples )
                                }
                                else {
                                    return [[ 6. 10.]]
                                    return 0 0  ( 6 examples )
                                    return 1 1  ( 10 examples )
                                }
                            }
                            else {
                                return [[ 0. 16.]]
                                return 1 1  ( 16 examples )
                            }
                        }
                        else {
                            return [[ 2. 46.]]
                            return 0 0  ( 2 examples )
                            return 1 1  ( 46 examples )
                        }
                    }
                }
                else {
                    if ( x3 <= 0.5 ) {
                        if ( x9 <= 0.5 ) {
                            if ( x14 <= 0.5 ) {
                                return [[16.  0.]]
                                return 0 0  ( 16 examples )
                            }
                            else {
                                return [[ 6. 10.]]
                                return 0 0  ( 6 examples )
                                return 1 1  ( 10 examples )
                            }
                        }
                        else {
                            return [[ 0. 16.]]
                            return 1 1  ( 16 examples )
                        }
                    }
                    else {
                        return [[ 2. 46.]]
                        return 0 0  ( 2 examples )
                        return 1 1  ( 46 examples )
                    }
                }
            }
            else {
                return [[ 28. 164.]]
                return 0 0  ( 28 examples )
                return 1 1  ( 164 examples )
            }
        }
        else {
            return [[ 18. 174.]]
            return 0 0  ( 18 examples )
            return 1 1  ( 174 examples )
        }
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0001029968262
lambda:  0.0025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.08032407407407408
Accuracy:  0.9571759259259259
COUNT of the best tree:  0
time when the best tree is achieved:  0.0036809444427490234
TOTAL COUNT:  32799118
nrule: 15
ndata: 1728
gr: [1.65127029e-03 7.07393833e-03 4.25186471e-03 4.72429412e-04
 4.25186471e-03 4.25186471e-03 1.97277235e-03 2.23265318e-05
 3.93840021e-04 8.98611647e-02 2.51428005e-02 3.76291367e-03
 3.87142061e-04 4.81050803e-02 8.98611647e-02]
order: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
odr: [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
the order of x's columns:  [14, 9, 13, 10, 1, 5, 4, 2, 11, 6, 0, 3, 8, 12, 7]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
if ( x2 <= 0.5 ) {
    if ( x1 <= 0.5 ) {
        if ( x5 <= 0.5 ) {
            if ( x8 <= 0.5 ) {
                if ( x7 <= 0.5 ) {
                    if ( x6 <= 0.5 ) {
                        if ( x12 <= 0.5 ) {
                            return [[96.  0.]]
                            return 0 0  ( 96 examples )
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                return [[48.  0.]]
                                return 0 0  ( 48 examples )
                            }
                            else {
                                if ( x3 <= 0.5 ) {
                                    if ( x9 <= 0.5 ) {
                                        if ( x14 <= 0.5 ) {
                                            return [[8. 0.]]
                                            return 0 0  ( 8 examples )
                                        }
                                        else {
                                            if ( x10 <= 0.5 ) {
                                                return [[1. 5.]]
                                                return 0 0  ( 1 examples )
                                                return 1 1  ( 5 examples )
                                            }
                                            else {
                                                return [[2. 0.]]
                                                return 0 0  ( 2 examples )
                                            }
                                        }
                                    }
                                    else {
                                        return [[0. 8.]]
                                        return 1 1  ( 8 examples )
                                    }
                                }
                                else {
                                    return [[ 1. 23.]]
                                    return 0 0  ( 1 examples )
                                    return 1 1  ( 23 examples )
                                }
                            }
                        }
                    }
                    else {
                        if ( x3 <= 0.5 ) {
                            if ( x9 <= 0.5 ) {
                                if ( x14 <= 0.5 ) {
                                    return [[16.  0.]]
                                    return 0 0  ( 16 examples )
                                }
                                else {
                                    if ( x10 <= 0.5 ) {
                                        return [[ 2. 10.]]
                                        return 0 0  ( 2 examples )
                                        return 1 1  ( 10 examples )
                                    }
                                    else {
                                        return [[4. 0.]]
                                        return 0 0  ( 4 examples )
                                    }
                                }
                            }
                            else {
                                return [[ 0. 16.]]
                                return 1 1  ( 16 examples )
                            }
                        }
                        else {
                            return [[ 2. 46.]]
                            return 0 0  ( 2 examples )
                            return 1 1  ( 46 examples )
                        }
                    }
                }
                else {
                    if ( x3 <= 0.5 ) {
                        if ( x9 <= 0.5 ) {
                            if ( x14 <= 0.5 ) {
                                return [[16.  0.]]
                                return 0 0  ( 16 examples )
                            }
                            else {
                                if ( x10 <= 0.5 ) {
                                    return [[ 2. 10.]]
                                    return 0 0  ( 2 examples )
                                    return 1 1  ( 10 examples )
                                }
                                else {
                                    return [[4. 0.]]
                                    return 0 0  ( 4 examples )
                                }
                            }
                        }
                        else {
                            return [[ 0. 16.]]
                            return 1 1  ( 16 examples )
                        }
                    }
                    else {
                        return [[ 2. 46.]]
                        return 0 0  ( 2 examples )
                        return 1 1  ( 46 examples )
                    }
                }
            }
            else {
                if ( x3 <= 0.5 ) {
                    if ( x9 <= 0.5 ) {
                        if ( x14 <= 0.5 ) {
                            if ( x7 <= 0.5 ) {
                                if ( x6 <= 0.5 ) {
                                    return [[16.  0.]]
                                    return 0 0  ( 16 examples )
                                }
                                else {
                                    return [[1. 7.]]
                                    return 0 0  ( 1 examples )
                                    return 1 1  ( 7 examples )
                                }
                            }
                            else {
                                return [[1. 7.]]
                                return 0 0  ( 1 examples )
                                return 1 1  ( 7 examples )
                            }
                        }
                        else {
                            if ( x10 <= 0.5 ) {
                                return [[ 2. 22.]]
                                return 0 0  ( 2 examples )
                                return 1 1  ( 22 examples )
                            }
                            else {
                                return [[4. 4.]]
                                return 0 0  ( 4 examples )
                                return 1 1  ( 4 examples )
                            }
                        }
                    }
                    else {
                        return [[ 0. 32.]]
                        return 1 1  ( 32 examples )
                    }
                }
                else {
                    return [[ 4. 92.]]
                    return 0 0  ( 4 examples )
                    return 1 1  ( 92 examples )
                }
            }
        }
        else {
            if ( x10 <= 0.5 ) {
                return [[  7. 137.]]
                return 0 0  ( 7 examples )
                return 1 1  ( 137 examples )
            }
            else {
                if ( x9 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        if ( x4 <= 0.5 ) {
                            return [[8. 0.]]
                            return 0 0  ( 8 examples )
                        }
                        else {
                            return [[1. 7.]]
                            return 0 0  ( 1 examples )
                            return 1 1  ( 7 examples )
                        }
                    }
                    else {
                        return [[ 2. 14.]]
                        return 0 0  ( 2 examples )
                        return 1 1  ( 14 examples )
                    }
                }
                else {
                    return [[ 0. 16.]]
                    return 1 1  ( 16 examples )
                }
            }
        }
    }
    else {
        return [[384.   0.]]
        return 0 0  ( 384 examples )
    }
}
else {
    return [[576.   0.]]
    return 0 0  ( 576 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0020463466644
lambda:  0.001
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.04951851851851849
Accuracy:  0.9814814814814815
COUNT of the best tree:  0
time when the best tree is achieved:  0.003997325897216797
TOTAL COUNT:  37334890
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
return [[332. 626.]]
return 0 0  ( 332 examples )
return 1 1  ( 626 examples )
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.08206605911254883
lambda:  0.1
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.4465553235908142
Accuracy:  0.6534446764091858
COUNT of the best tree:  0
time when the best tree is achieved:  0.002629995346069336
TOTAL COUNT:  52
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
if ( x1 <= 0.5 ) {
    return [[140. 478.]]
    return 0 0  ( 140 examples )
    return 1 1  ( 478 examples )
}
else {
    return [[192. 148.]]
    return 0 0  ( 192 examples )
    return 1 1  ( 148 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3.523085832595825
lambda:  0.05
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.40062630480167016
Accuracy:  0.6993736951983298
COUNT of the best tree:  0
time when the best tree is achieved:  0.002486705780029297
TOTAL COUNT:  29053
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.000072002411
lambda:  0.025
leaves:  [(2,), (-2, 14), (-14, -13, -2), (-14, -2, 13)]
num_captured:  [458, 246, 92, 162]
num_captured_incorrect:  [92, 95, 0, 53]
prediction:  [1, 1, 0, 1]
Objective:  0.35052192066805843
Accuracy:  0.7494780793319415
COUNT of the best tree:  29817
time when the best tree is achieved:  4.956372976303101
TOTAL COUNT:  16452312
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0005462169647
lambda:  0.01
leaves:  [(2,), (-14, -13, -2), (-2, 11, 13), (-13, -2, 11, 14), (-12, -11, -2, 13), (-11, -2, 12, 13), (-13, -12, -11, -2, 14), (-13, -11, -2, 12, 14)]
num_captured:  [458, 92, 114, 82, 50, 82, 26, 54]
num_captured_incorrect:  [92, 0, 28, 17, 0, 17, 0, 10]
prediction:  [1, 0, 1, 1, 0, 1, 0, 1]
Objective:  0.25118997912317326
Accuracy:  0.8288100208768268
COUNT of the best tree:  24928
time when the best tree is achieved:  1.986004114151001
TOTAL COUNT:  21102285
nrule: 18
ndata: 958
gr: [0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414
 0.00172338 0.00441609 0.05236403 0.03888096 0.00172338 0.00441609
 0.00856949 0.00423414 0.00172338 0.00441609 0.00856949 0.00423414]
order: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
odr: [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
the order of x's columns:  [8, 9, 12, 4, 16, 0, 11, 7, 15, 3, 13, 5, 1, 17, 10, 14, 6, 2]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0010130405426
lambda:  0.005
leaves:  [(2,), (-12, -2, 3), (-6, -3, -2, -1), (-14, -3, -2, 6), (-4, -3, -2, 6, 14), (-14, -10, -2, 3, 12), (-10, -2, 3, 12, 14), (-2, 3, 10, 12, 13), (-18, -17, -6, -3, -2, 1), (-16, -6, -3, -2, 1, 18), (-6, -3, -2, 1, 16, 18), (-18, -3, -2, 4, 6, 14), (-3, -2, 4, 6, 14, 18), (-14, -13, -2, 3, 10, 12), (-18, -15, -6, -3, -2, 1, 17), (-18, -6, -3, -2, 1, 15, 17), (-13, -7, -2, 3, 10, 12, 14), (-13, -2, 3, 7, 10, 12, 14)]
num_captured:  [458, 67, 71, 54, 46, 9, 28, 31, 46, 32, 30, 11, 8, 11, 18, 27, 5, 6]
num_captured_incorrect:  [92, 0, 10, 0, 5, 0, 4, 0, 3, 4, 0, 1, 0, 0, 2, 0, 0, 0]
prediction:  [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1]
Objective:  0.21630480167014612
Accuracy:  0.8736951983298539
COUNT of the best tree:  13026094
time when the best tree is achieved:  891.1945550441742
TOTAL COUNT:  26969456
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  6.811309099197388
lambda:  0.1
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.5040443637058992
Accuracy:  0.6959556362941008
COUNT of the best tree:  2
time when the best tree is achieved:  0.10504293441772461
TOTAL COUNT:  234
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  23.707519054412842
lambda:  0.05
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.40404436370589925
Accuracy:  0.6959556362941007
COUNT of the best tree:  4
time when the best tree is achieved:  0.10258603096008301
TOTAL COUNT:  8526
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1597.1885192394257
lambda:  0.025
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.3540443637058992
Accuracy:  0.6959556362941008
COUNT of the best tree:  4
time when the best tree is achieved:  0.10237908363342285
TOTAL COUNT:  18030958
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1819.6187360286713
lambda:  0.01
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.32404436370589923
Accuracy:  0.6959556362941008
COUNT of the best tree:  4
time when the best tree is achieved:  0.10451316833496094
TOTAL COUNT:  26650790
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1861.5917267799377
lambda:  0.005
leaves:  [(-4,), (-9, -1, 4), (-9, 1, 4), (-2, 4, 9), (2, 4, 9)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.313650922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  3295255
time when the best tree is achieved:  235.45343899726868
TOTAL COUNT:  40758575
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
COUNT: 46000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000638961792
lambda:  0.0025
leaves:  [(-4,), (-9, -1, 4), (-9, 1, 4), (-2, 4, 9), (2, 4, 9)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.301150922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  14105859
time when the best tree is achieved:  513.2395989894867
TOTAL COUNT:  46192257
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0023140907288
lambda:  0.001
leaves:  [(-4,), (1, 4, 9), (-20, -16, -1, 4), (-20, -1, 4, 16), (-2, -1, 4, 20), (-1, 2, 4, 20), (-12, -9, 1, 4), (-9, 1, 4, 12)]
num_captured:  [2178, 1687, 1969, 179, 1621, 818, 297, 1710]
num_captured_incorrect:  [394, 279, 583, 75, 683, 330, 141, 511]
prediction:  [0, 1, 0, 1, 0, 1, 0, 1]
Objective:  0.29445185964241327
Accuracy:  0.7135481403575867
COUNT of the best tree:  1432163
time when the best tree is achieved:  61.297544956207275
TOTAL COUNT:  29824292
nrule: 21
ndata: 10459
gr: [0.05898427 0.077186   0.07708798 0.04644915 0.00557068 0.02397421
 0.02375848 0.0057134  0.01764867 0.03184166 0.02938082 0.02469603
 0.00745908 0.00979195 0.00437361 0.01298682 0.02652959 0.03950442
 0.04378692 0.01825571 0.01956095]
order: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
odr: [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
the order of x's columns:  [1, 2, 0, 3, 18, 17, 9, 10, 16, 11, 5, 6, 20, 19, 8, 15, 13, 12, 7, 4, 14]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
if ( x1 <= 0.5 ) {
    if ( x4 <= 0.5 ) {
        if ( x11 <= 0.5 ) {
            return [[1065.  175.]]
            return 0 0  ( 1065 examples )
            return 1 1  ( 175 examples )
        }
        else {
            if ( x9 <= 0.5 ) {
                return [[543. 136.]]
                return 0 0  ( 543 examples )
                return 1 1  ( 136 examples )
            }
            else {
                return [[176.  83.]]
                return 0 0  ( 176 examples )
                return 1 1  ( 83 examples )
            }
        }
    }
    else {
        if ( x9 <= 0.5 ) {
            if ( x2 <= 0.5 ) {
                if ( x20 <= 0.5 ) {
                    if ( x5 <= 0.5 ) {
                        return [[499.  98.]]
                        return 0 0  ( 499 examples )
                        return 1 1  ( 98 examples )
                    }
                    else {
                        return [[298. 117.]]
                        return 0 0  ( 298 examples )
                        return 1 1  ( 117 examples )
                    }
                }
                else {
                    return [[452. 230.]]
                    return 0 0  ( 452 examples )
                    return 1 1  ( 230 examples )
                }
            }
            else {
                if ( x20 <= 0.5 ) {
                    if ( x17 <= 0.5 ) {
                        return [[147.  46.]]
                        return 0 0  ( 147 examples )
                        return 1 1  ( 46 examples )
                    }
                    else {
                        return [[221. 152.]]
                        return 0 0  ( 221 examples )
                        return 1 1  ( 152 examples )
                    }
                }
                else {
                    if ( x19 <= 0.5 ) {
                        return [[192. 163.]]
                        return 0 0  ( 192 examples )
                        return 1 1  ( 163 examples )
                    }
                    else {
                        return [[ 64. 102.]]
                        return 0 0  ( 64 examples )
                        return 1 1  ( 102 examples )
                    }
                }
            }
        }
        else {
            if ( x2 <= 0.5 ) {
                if ( x13 <= 0.5 ) {
                    return [[653. 542.]]
                    return 0 0  ( 653 examples )
                    return 1 1  ( 542 examples )
                }
                else {
                    return [[27. 53.]]
                    return 0 0  ( 27 examples )
                    return 1 1  ( 53 examples )
                }
            }
            else {
                if ( x12 <= 0.5 ) {
                    return [[58. 51.]]
                    return 0 0  ( 58 examples )
                    return 1 1  ( 51 examples )
                }
                else {
                    if ( x8 <= 0.5 ) {
                        return [[33. 28.]]
                        return 0 0  ( 33 examples )
                        return 1 1  ( 28 examples )
                    }
                    else {
                        return [[ 85. 276.]]
                        return 0 0  ( 85 examples )
                        return 1 1  ( 276 examples )
                    }
                }
            }
        }
    }
}
else {
    if ( x9 <= 0.5 ) {
        if ( x11 <= 0.5 ) {
            if ( x17 <= 0.5 ) {
                return [[100.  75.]]
                return 0 0  ( 100 examples )
                return 1 1  ( 75 examples )
            }
            else {
                return [[187. 260.]]
                return 0 0  ( 187 examples )
                return 1 1  ( 260 examples )
            }
        }
        else {
            if ( x3 <= 0.5 ) {
                if ( x15 <= 0.5 ) {
                    return [[27. 15.]]
                    return 0 0  ( 27 examples )
                    return 1 1  ( 15 examples )
                }
                else {
                    if ( x14 <= 0.5 ) {
                        return [[12.  4.]]
                        return 0 0  ( 12 examples )
                        return 1 1  ( 4 examples )
                    }
                    else {
                        return [[140. 287.]]
                        return 0 0  ( 140 examples )
                        return 1 1  ( 287 examples )
                    }
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    return [[46. 80.]]
                    return 0 0  ( 46 examples )
                    return 1 1  ( 80 examples )
                }
                else {
                    return [[155. 619.]]
                    return 0 0  ( 155 examples )
                    return 1 1  ( 619 examples )
                }
            }
        }
    }
    else {
        if ( x3 <= 0.5 ) {
            return [[129. 413.]]
            return 0 0  ( 129 examples )
            return 1 1  ( 413 examples )
        }
        else {
            return [[150. 995.]]
            return 0 0  ( 150 examples )
            return 1 1  ( 995 examples )
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0014107227325
lambda:  0.0005
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.2890819389999044
Accuracy:  0.7229180610000956
COUNT of the best tree:  0
time when the best tree is achieved:  0.02218484878540039
TOTAL COUNT:  30626184
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
if ( x1 <= 0.5 ) {
    return [[62. 33.]]
    return 0 0  ( 62 examples )
    return 1 1  ( 33 examples )
}
else {
    return [[ 0. 29.]]
    return 1 1  ( 29 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.01584172248840332
lambda:  0.1
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.4661290322580645
Accuracy:  0.7338709677419355
COUNT of the best tree:  0
time when the best tree is achieved:  0.0009999275207519531
TOTAL COUNT:  43
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.31705403327941895
lambda:  0.05
leaves:  [(1,), (-7, -2, -1), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7)]
num_captured:  [29, 36, 20, 31, 8]
num_captured_incorrect:  [0, 11, 0, 0, 0]
prediction:  [1, 1, 0, 0, 1]
Objective:  0.33870967741935487
Accuracy:  0.9112903225806451
COUNT of the best tree:  697
time when the best tree is achieved:  0.10698509216308594
TOTAL COUNT:  4747
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  25.58094072341919
lambda:  0.025
leaves:  [(1,), (-10, -1, 9), (-9, -1, 10), (-1, 9, 10), (-10, -9, -7, -2, -1), (-10, -9, -2, -1, 7), (-10, -9, -7, -1, 2), (-10, -9, -1, 2, 7)]
num_captured:  [29, 20, 20, 12, 13, 6, 16, 8]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.2
Accuracy:  1.0
COUNT of the best tree:  4323
time when the best tree is achieved:  0.3123307228088379
TOTAL COUNT:  534514
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  76.6111249923706
lambda:  0.01
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.08
Accuracy:  1.0
COUNT of the best tree:  1250
time when the best tree is achieved:  0.1007227897644043
TOTAL COUNT:  2029943
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  98.1688539981842
lambda:  0.005
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.04
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.12389302253723145
TOTAL COUNT:  2685438
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  103.18204498291016
lambda:  0.0025
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.02
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.1260519027709961
TOTAL COUNT:  2689799
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  102.83410620689392
lambda:  0.001
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.008
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.12277030944824219
TOTAL COUNT:  2687999
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  102.86902403831482
lambda:  0.0005
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.004
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.12212038040161133
TOTAL COUNT:  2685793
nrule: 11
ndata: 124
gr: [0.04064698 0.00058072 0.00401284 0.00058072 0.00325945 0.014518
 0.01221719 0.15263158 0.01404787 0.01134752 0.00052521]
order: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
odr: [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
the order of x's columns:  [7, 0, 5, 8, 6, 9, 2, 4, 3, 1, 10]
COUNT: 1000000
COUNT: 2000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  102.5827100276947
lambda:  0.0001
leaves:  [(1,), (-2, -1, 7), (-7, -1, 2), (-1, 2, 7), (-10, -9, -7, -2, -1), (-10, -7, -2, -1, 9), (-9, -7, -2, -1, 10), (-7, -2, -1, 9, 10)]
num_captured:  [29, 20, 31, 8, 13, 5, 6, 12]
num_captured_incorrect:  [0, 0, 0, 0, 0, 0, 0, 0]
prediction:  [1, 0, 0, 1, 1, 0, 0, 1]
Objective:  0.0008
Accuracy:  1.0
COUNT of the best tree:  2294
time when the best tree is achieved:  0.11695575714111328
TOTAL COUNT:  2686114
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
return [[105.  64.]]
return 0 0  ( 105 examples )
return 1 1  ( 64 examples )
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.011852025985717773
lambda:  0.1
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.47869822485207103
Accuracy:  0.621301775147929
COUNT of the best tree:  0
time when the best tree is achieved:  0.0008039474487304688
TOTAL COUNT:  29
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
return [[105.  64.]]
return 0 0  ( 105 examples )
return 1 1  ( 64 examples )
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  3.9963808059692383
lambda:  0.05
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.42869822485207104
Accuracy:  0.621301775147929
COUNT of the best tree:  0
time when the best tree is achieved:  0.0007808208465576172
TOTAL COUNT:  40694
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0000789165497
lambda:  0.025
leaves:  [(-9,), (3, 9), (-5, -3, 9), (-3, 5, 9)]
num_captured:  [86, 40, 31, 12]
num_captured_incorrect:  [31, 9, 9, 2]
prediction:  [0, 0, 1, 0]
Objective:  0.40177514792899405
Accuracy:  0.6982248520710059
COUNT of the best tree:  466
time when the best tree is achieved:  0.13811683654785156
TOTAL COUNT:  15013608
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0041489601135
lambda:  0.01
leaves:  [(1,), (-9, -5, -1), (-9, -1, 5), (-1, 5, 9), (-5, -3, -1, 4, 9), (-5, -1, 3, 4, 9), (-7, -5, -4, -3, -1, 9), (-5, -4, -3, -1, 7, 9), (-7, -5, -4, -1, 3, 9), (-5, -4, -1, 3, 7, 9)]
num_captured:  [54, 42, 14, 14, 9, 12, 5, 8, 9, 2]
num_captured_incorrect:  [15, 10, 3, 2, 0, 0, 0, 0, 0, 0]
prediction:  [0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Objective:  0.2775147928994083
Accuracy:  0.8224852071005917
COUNT of the best tree:  4282
time when the best tree is achieved:  0.26889872550964355
TOTAL COUNT:  19514971
nrule: 11
ndata: 169
gr: [2.09472291e-03 5.37476881e-05 1.06636530e-03 1.37412839e-03
 6.88924755e-04 9.56498397e-03 7.74047423e-04 1.92571581e-03
 9.12503606e-03 6.69887366e-05 4.06752386e-03]
order: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
odr: [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
the order of x's columns:  [5, 8, 10, 0, 7, 3, 2, 6, 4, 9, 1]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
if ( x1 <= 0.5 ) {
    if ( x2 <= 0.5 ) {
        if ( x7 <= 0.5 ) {
            if ( x3 <= 0.5 ) {
                if ( x4 <= 0.5 ) {
                    if ( x5 <= 0.5 ) {
                        return [[14.  0.]]
                        return 0 0  ( 14 examples )
                    }
                    else {
                        return [[0. 2.]]
                        return 1 1  ( 2 examples )
                    }
                }
                else {
                    if ( x9 <= 0.5 ) {
                        if ( x5 <= 0.5 ) {
                            return [[4. 0.]]
                            return 0 0  ( 4 examples )
                        }
                        else {
                            return [[0. 2.]]
                            return 1 1  ( 2 examples )
                        }
                    }
                    else {
                        if ( x5 <= 0.5 ) {
                            return [[0. 5.]]
                            return 1 1  ( 5 examples )
                        }
                        else {
                            return [[2. 0.]]
                            return 0 0  ( 2 examples )
                        }
                    }
                }
            }
            else {
                if ( x9 <= 0.5 ) {
                    if ( x10 <= 0.5 ) {
                        return [[1. 9.]]
                        return 0 0  ( 1 examples )
                        return 1 1  ( 9 examples )
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[3. 0.]]
                            return 0 0  ( 3 examples )
                        }
                        else {
                            return [[0. 2.]]
                            return 1 1  ( 2 examples )
                        }
                    }
                }
                else {
                    if ( x4 <= 0.5 ) {
                        if ( x5 <= 0.5 ) {
                            return [[0. 6.]]
                            return 1 1  ( 6 examples )
                        }
                        else {
                            return [[3. 0.]]
                            return 0 0  ( 3 examples )
                        }
                    }
                    else {
                        return [[7. 0.]]
                        return 0 0  ( 7 examples )
                    }
                }
            }
        }
        else {
            if ( x3 <= 0.5 ) {
                if ( x10 <= 0.5 ) {
                    return [[8. 4.]]
                    return 0 0  ( 8 examples )
                    return 1 1  ( 4 examples )
                }
                else {
                    if ( x9 <= 0.5 ) {
                        return [[1. 0.]]
                        return 0 0  ( 1 examples )
                    }
                    else {
                        return [[0. 3.]]
                        return 1 1  ( 3 examples )
                    }
                }
            }
            else {
                return [[10.  0.]]
                return 0 0  ( 10 examples )
            }
        }
    }
    else {
        if ( x9 <= 0.5 ) {
            if ( x7 <= 0.5 ) {
                if ( x4 <= 0.5 ) {
                    return [[8. 0.]]
                    return 0 0  ( 8 examples )
                }
                else {
                    return [[0. 1.]]
                    return 1 1  ( 1 examples )
                }
            }
            else {
                if ( x3 <= 0.5 ) {
                    if ( x4 <= 0.5 ) {
                        return [[2. 0.]]
                        return 0 0  ( 2 examples )
                    }
                    else {
                        return [[0. 1.]]
                        return 1 1  ( 1 examples )
                    }
                }
                else {
                    return [[0. 3.]]
                    return 1 1  ( 3 examples )
                }
            }
        }
        else {
            if ( x3 <= 0.5 ) {
                return [[0. 8.]]
                return 1 1  ( 8 examples )
            }
            else {
                if ( x4 <= 0.5 ) {
                    return [[0. 3.]]
                    return 1 1  ( 3 examples )
                }
                else {
                    return [[3. 0.]]
                    return 0 0  ( 3 examples )
                }
            }
        }
    }
}
else {
    if ( x3 <= 0.5 ) {
        if ( x4 <= 0.5 ) {
            if ( x6 <= 0.5 ) {
                if ( x11 <= 0.5 ) {
                    return [[0. 4.]]
                    return 1 1  ( 4 examples )
                }
                else {
                    return [[3. 3.]]
                    return 0 0  ( 3 examples )
                    return 1 1  ( 3 examples )
                }
            }
            else {
                if ( x9 <= 0.5 ) {
                    return [[5. 0.]]
                    return 0 0  ( 5 examples )
                }
                else {
                    if ( x5 <= 0.5 ) {
                        return [[0. 3.]]
                        return 1 1  ( 3 examples )
                    }
                    else {
                        return [[1. 0.]]
                        return 0 0  ( 1 examples )
                    }
                }
            }
        }
        else {
            return [[6. 1.]]
            return 0 0  ( 6 examples )
            return 1 1  ( 1 examples )
        }
    }
    else {
        return [[24.  4.]]
        return 0 0  ( 24 examples )
        return 1 1  ( 4 examples )
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0123360157013
lambda:  0.005
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.23192307692307687
Accuracy:  0.9230769230769231
COUNT of the best tree:  0
time when the best tree is achieved:  0.0010340213775634766
TOTAL COUNT:  34390697
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.09086298942565918
lambda:  0.1
leaves:  [(2,), (-2, -1), (-2, 1)]
num_captured:  [39, 41, 42]
num_captured_incorrect:  [13, 3, 11]
prediction:  [1, 0, 1]
Objective:  0.521311475409836
Accuracy:  0.778688524590164
COUNT of the best tree:  37
time when the best tree is achieved:  0.01737809181213379
TOTAL COUNT:  189
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.20876383781433105
lambda:  0.05
leaves:  [(2,), (-2, -1), (-2, 1)]
num_captured:  [39, 41, 42]
num_captured_incorrect:  [13, 3, 11]
prediction:  [1, 0, 1]
Objective:  0.37131147540983606
Accuracy:  0.778688524590164
COUNT of the best tree:  67
time when the best tree is achieved:  0.023486852645874023
TOTAL COUNT:  3419
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
if ( x1 <= 0.5 ) {
    if ( x2 <= 0.5 ) {
        return [[38.  3.]]
        return 0 0  ( 38 examples )
        return 1 1  ( 3 examples )
    }
    else {
        if ( x3 <= 0.5 ) {
            if ( x4 <= 0.5 ) {
                if ( x7 <= 0.5 ) {
                    return [[12.  0.]]
                    return 0 0  ( 12 examples )
                }
                else {
                    return [[1. 5.]]
                    return 0 0  ( 1 examples )
                    return 1 1  ( 5 examples )
                }
            }
            else {
                return [[0. 9.]]
                return 1 1  ( 9 examples )
            }
        }
        else {
            return [[ 0. 12.]]
            return 1 1  ( 12 examples )
        }
    }
}
else {
    return [[11. 31.]]
    return 0 0  ( 11 examples )
    return 1 1  ( 31 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  698.3333959579468
lambda:  0.025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.2729508196721312
Accuracy:  0.8770491803278688
COUNT of the best tree:  0
time when the best tree is achieved:  0.0006499290466308594
TOTAL COUNT:  9201636
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
if ( x1 <= 0.5 ) {
    if ( x2 <= 0.5 ) {
        return [[38.  3.]]
        return 0 0  ( 38 examples )
        return 1 1  ( 3 examples )
    }
    else {
        if ( x3 <= 0.5 ) {
            if ( x4 <= 0.5 ) {
                if ( x7 <= 0.5 ) {
                    return [[12.  0.]]
                    return 0 0  ( 12 examples )
                }
                else {
                    return [[1. 5.]]
                    return 0 0  ( 1 examples )
                    return 1 1  ( 5 examples )
                }
            }
            else {
                return [[0. 9.]]
                return 1 1  ( 9 examples )
            }
        }
        else {
            return [[ 0. 12.]]
            return 1 1  ( 12 examples )
        }
    }
}
else {
    if ( x3 <= 0.5 ) {
        if ( x4 <= 0.5 ) {
            if ( x7 <= 0.5 ) {
                return [[7. 0.]]
                return 0 0  ( 7 examples )
            }
            else {
                return [[3. 9.]]
                return 0 0  ( 3 examples )
                return 1 1  ( 9 examples )
            }
        }
        else {
            return [[ 1. 12.]]
            return 0 0  ( 1 examples )
            return 1 1  ( 12 examples )
        }
    }
    else {
        return [[ 0. 10.]]
        return 1 1  ( 10 examples )
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0037631988525
lambda:  0.01
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.15557377049180324
Accuracy:  0.9344262295081968
COUNT of the best tree:  0
time when the best tree is achieved:  0.0006232261657714844
TOTAL COUNT:  17506786
nrule: 11
ndata: 122
gr: [0.00322554 0.00435383 0.0287352  0.06369272 0.00057579 0.00107514
 0.00178641 0.02723357 0.0234737  0.00377713 0.00489568]
order: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
odr: [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
the order of x's columns:  [3, 2, 7, 8, 10, 1, 9, 0, 6, 5, 4]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1802.9654250144958
lambda:  0.005
leaves:  [(2, 3), (-3, 1, 4), (-2, -1, 3), (-2, 1, 3), (-7, -4, -3, -1), (-7, -4, -3, 1), (-7, -3, -2, -1, 4), (-7, -3, -1, 2, 4), (-10, -3, -2, -1, 7), (-10, -3, -1, 2, 7), (-8, -3, -1, 7, 10), (-3, -1, 7, 8, 10), (-11, -4, -3, 1, 7), (-4, -3, 1, 7, 10, 11), (-10, -6, -4, -3, 1, 7, 11), (-10, -4, -3, 1, 6, 7, 11)]
num_captured:  [12, 13, 10, 10, 24, 7, 9, 9, 8, 4, 3, 1, 5, 2, 3, 2]
num_captured_incorrect:  [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
prediction:  [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0]
Objective:  0.10459016393442623
Accuracy:  0.9754098360655737
COUNT of the best tree:  2585117
time when the best tree is achieved:  140.41581416130066
TOTAL COUNT:  30938626
huxiyangdeMacBook-Pro:src huxiyang$
  [Restored Jan 17, 2019 at 5:43:55 PM]
Last login: Thu Jan 17 17:43:53 on ttys000
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3260838985443115
lambda:  0.1
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.5610829593166353
Accuracy:  0.6389170406833646
COUNT of the best tree:  1
time when the best tree is achieved:  0.041889190673828125
TOTAL COUNT:  11
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  0.3385961055755615
lambda:  0.05
leaves:  [(-1,), (1,)]
num_captured:  [4733, 2174]
num_captured_incorrect:  [1758, 736]
prediction:  [0, 1]
Objective:  0.46108295931663523
Accuracy:  0.6389170406833647
COUNT of the best tree:  1
time when the best tree is achieved:  0.04124021530151367
TOTAL COUNT:  26
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
if ( x1 <= 0.5 ) {
    return [[2975. 1758.]]
    return 0 0  ( 2975 examples )
    return 1 1  ( 1758 examples )
}
else {
    return [[ 736. 1438.]]
    return 0 0  ( 736 examples )
    return 1 1  ( 1438 examples )
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  2.558743953704834
lambda:  0.025
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.41108295931663524
Accuracy:  0.6389170406833647
COUNT of the best tree:  0
time when the best tree is achieved:  0.012506961822509766
TOTAL COUNT:  256
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
^Z
[1]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 21
ndata: 10459
gr: [0.05898427 0.07708798 0.04644915 0.00641467 0.01495774 0.02273917
 0.0057134  0.01652376 0.03272346 0.02790318 0.02095492 0.00994664
 0.00254574 0.01298682 0.02652959 0.03950442 0.04378692 0.
 0.01825571 0.01956095 0.02057185]
order: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
odr: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
the order of x's columns:  [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  194.34524202346802
lambda:  0.025
leaves:  [(-1,), (1,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.3540443637058992
Accuracy:  0.6959556362941008
COUNT of the best tree:  1
time when the best tree is achieved:  0.06569600105285645
TOTAL COUNT:  437800
nrule: 21
ndata: 10459
gr: [0.05898427 0.07708798 0.04644915 0.00641467 0.01495774 0.02273917
 0.0057134  0.01652376 0.03272346 0.02790318 0.02095492 0.00994664
 0.00254574 0.01298682 0.02652959 0.03950442 0.04378692 0.
 0.01825571 0.01956095 0.02057185]
order: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
odr: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
the order of x's columns:  [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0004138946533
lambda:  0.01
leaves:  [(-1,), (1,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.32404436370589923
Accuracy:  0.6959556362941008
COUNT of the best tree:  1
time when the best tree is achieved:  0.06316900253295898
TOTAL COUNT:  25612593
nrule: 21
ndata: 10459
gr: [0.05898427 0.07708798 0.04644915 0.00641467 0.01495774 0.02273917
 0.0057134  0.01652376 0.03272346 0.02790318 0.02095492 0.00994664
 0.00254574 0.01298682 0.02652959 0.03950442 0.04378692 0.
 0.01825571 0.01956095 0.02057185]
order: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
odr: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
the order of x's columns:  [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1817.319823026657
lambda:  0.005
leaves:  [(-1,), (1,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.3140443637058992
Accuracy:  0.6959556362941008
COUNT of the best tree:  1
time when the best tree is achieved:  0.0690758228302002
TOTAL COUNT:  37440421
nrule: 21
ndata: 10459
gr: [0.05898427 0.07708798 0.04644915 0.00641467 0.01495774 0.02273917
 0.0057134  0.01652376 0.03272346 0.02790318 0.02095492 0.00994664
 0.00254574 0.01298682 0.02652959 0.03950442 0.04378692 0.
 0.01825571 0.01956095 0.02057185]
order: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
odr: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
the order of x's columns:  [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
COUNT: 42000000
COUNT: 43000000
COUNT: 44000000
COUNT: 45000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0053761005402
lambda:  0.0025
leaves:  [(-3,), (-9, -2, 3), (-9, 2, 3), (-1, 3, 9), (1, 3, 9)]
num_captured:  [2178, 1084, 82, 2344, 4771]
num_captured_incorrect:  [394, 319, 34, 899, 1431]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.30669638588775217
Accuracy:  0.7058036141122479
COUNT of the best tree:  15277876
time when the best tree is achieved:  559.8359508514404
TOTAL COUNT:  45131419
nrule: 21
ndata: 10459
gr: [0.05898427 0.07708798 0.04644915 0.00641467 0.01495774 0.02273917
 0.0057134  0.01652376 0.03272346 0.02790318 0.02095492 0.00994664
 0.00254574 0.01298682 0.02652959 0.03950442 0.04378692 0.
 0.01825571 0.01956095 0.02057185]
order: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
odr: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
the order of x's columns:  [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1871.1677639484406
lambda:  0.001
leaves:  [(-3,), (-5, -1, 3), (-1, 3, 5), (-9, 1, 3), (1, 3, 9)]
num_captured:  [2178, 2646, 323, 541, 4771]
num_captured_incorrect:  [394, 899, 141, 226, 1431]
prediction:  [0, 0, 0, 0, 1]
Objective:  0.3005349459795391
Accuracy:  0.7044650540204609
COUNT of the best tree:  403
time when the best tree is achieved:  3.3901801109313965
TOTAL COUNT:  37173612
nrule: 21
ndata: 10459
gr: [0.05898427 0.07708798 0.04644915 0.00641467 0.01495774 0.02273917
 0.0057134  0.01652376 0.03272346 0.02790318 0.02095492 0.00994664
 0.00254574 0.01298682 0.02652959 0.03950442 0.04378692 0.
 0.01825571 0.01956095 0.02057185]
order: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
odr: [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
the order of x's columns:  [1, 0, 2, 16, 15, 8, 9, 14, 5, 10, 20, 19, 18, 7, 4, 13, 11, 3, 6, 12, 17]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
if ( x1 <= 0.5 ) {
    if ( x8 <= 0.5 ) {
        if ( x3 <= 0.5 ) {
            return [[1428.  266.]]
            return 0 0  ( 1428 examples )
            return 1 1  ( 266 examples )
        }
        else {
            if ( x18 <= 0.5 ) {
                if ( x4 <= 0.5 ) {
                    return [[499.  98.]]
                    return 0 0  ( 499 examples )
                    return 1 1  ( 98 examples )
                }
                else {
                    return [[298. 117.]]
                    return 0 0  ( 298 examples )
                    return 1 1  ( 117 examples )
                }
            }
            else {
                return [[452. 230.]]
                return 0 0  ( 452 examples )
                return 1 1  ( 230 examples )
            }
        }
    }
    else {
        if ( x3 <= 0.5 ) {
            return [[356. 128.]]
            return 0 0  ( 356 examples )
            return 1 1  ( 128 examples )
        }
        else {
            if ( x12 <= 0.5 ) {
                return [[653. 542.]]
                return 0 0  ( 653 examples )
                return 1 1  ( 542 examples )
            }
            else {
                return [[27. 53.]]
                return 0 0  ( 27 examples )
                return 1 1  ( 53 examples )
            }
        }
    }
}
else {
    if ( x2 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x18 <= 0.5 ) {
                if ( x17 <= 0.5 ) {
                    return [[234. 107.]]
                    return 0 0  ( 234 examples )
                    return 1 1  ( 107 examples )
                }
                else {
                    if ( x14 <= 0.5 ) {
                        return [[102.  54.]]
                        return 0 0  ( 102 examples )
                        return 1 1  ( 54 examples )
                    }
                    else {
                        return [[245. 261.]]
                        return 0 0  ( 245 examples )
                        return 1 1  ( 261 examples )
                    }
                }
            }
            else {
                if ( x4 <= 0.5 ) {
                    return [[119.  98.]]
                    return 0 0  ( 119 examples )
                    return 1 1  ( 98 examples )
                }
                else {
                    if ( x19 <= 0.5 ) {
                        return [[205. 261.]]
                        return 0 0  ( 205 examples )
                        return 1 1  ( 261 examples )
                    }
                    else {
                        return [[ 75. 167.]]
                        return 0 0  ( 75 examples )
                        return 1 1  ( 167 examples )
                    }
                }
            }
        }
        else {
            if ( x9 <= 0.5 ) {
                if ( x11 <= 0.5 ) {
                    return [[18.  4.]]
                    return 0 0  ( 18 examples )
                    return 1 1  ( 4 examples )
                }
                else {
                    return [[57. 74.]]
                    return 0 0  ( 57 examples )
                    return 1 1  ( 74 examples )
                }
            }
            else {
                if ( x7 <= 0.5 ) {
                    return [[32. 34.]]
                    return 0 0  ( 32 examples )
                    return 1 1  ( 34 examples )
                }
                else {
                    return [[198. 656.]]
                    return 0 0  ( 198 examples )
                    return 1 1  ( 656 examples )
                }
            }
        }
    }
    else {
        if ( x8 <= 0.5 ) {
            if ( x9 <= 0.5 ) {
                return [[29. 23.]]
                return 0 0  ( 29 examples )
                return 1 1  ( 23 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    return [[ 70. 120.]]
                    return 0 0  ( 70 examples )
                    return 1 1  ( 120 examples )
                }
                else {
                    return [[212. 712.]]
                    return 0 0  ( 212 examples )
                    return 1 1  ( 712 examples )
                }
            }
        }
        else {
            return [[150. 995.]]
            return 0 0  ( 150 examples )
            return 1 1  ( 995 examples )
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0046520233154
lambda:  0.0005
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.29140639640501004
Accuracy:  0.71909360359499
COUNT of the best tree:  0
time when the best tree is achieved:  0.02941417694091797
TOTAL COUNT:  38240282
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0013089179993
lambda:  0.005
leaves:  [(-3,), (-8, -1, 3), (-8, 1, 3), (-2, 3, 8), (2, 3, 8)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.313650922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  842655
time when the best tree is achieved:  67.59366989135742
TOTAL COUNT:  36177860
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1857.0037519931793
lambda:  0.0035
leaves:  [(-3,), (-8, -1, 3), (-8, 1, 3), (-2, 3, 8), (2, 3, 8)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.306150922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  634486
time when the best tree is achieved:  42.08933615684509
TOTAL COUNT:  39302324
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0038137435913
lambda:  0.0025
leaves:  [(-3,), (-8, -1, 3), (-8, 1, 3), (-2, 3, 8), (2, 3, 8)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.301150922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  716885
time when the best tree is achieved:  43.64817690849304
TOTAL COUNT:  41902599
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0006041526794
lambda:  0.001
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.29406941390190267
Accuracy:  0.7139305860980973
COUNT of the best tree:  5771
time when the best tree is achieved:  4.795517921447754
TOTAL COUNT:  39963075
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
COUNT: 40000000
COUNT: 41000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.000104188919
lambda:  0.00075
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.29206941390190266
Accuracy:  0.7139305860980973
COUNT of the best tree:  5905
time when the best tree is achieved:  4.175041913986206
TOTAL COUNT:  41690444
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0005550384521
lambda:  0.0005
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.29006941390190266
Accuracy:  0.7139305860980973
COUNT of the best tree:  5905
time when the best tree is achieved:  4.20557975769043
TOTAL COUNT:  39619768
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
if ( x1 <= 0.5 ) {
    if ( x3 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x12 <= 0.5 ) {
                if ( x4 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        return [[436.  40.]]
                        return 0 0  ( 436 examples )
                        return 1 1  ( 40 examples )
                    }
                    else {
                        if ( x13 <= 0.5 ) {
                            return [[102.  10.]]
                            return 0 0  ( 102 examples )
                            return 1 1  ( 10 examples )
                        }
                        else {
                            return [[285.  59.]]
                            return 0 0  ( 285 examples )
                            return 1 1  ( 59 examples )
                        }
                    }
                }
                else {
                    if ( x9 <= 0.5 ) {
                        return [[262.  52.]]
                        return 0 0  ( 262 examples )
                        return 1 1  ( 52 examples )
                    }
                    else {
                        if ( x13 <= 0.5 ) {
                            return [[8. 1.]]
                            return 0 0  ( 8 examples )
                            return 1 1  ( 1 examples )
                        }
                        else {
                            if ( x16 <= 0.5 ) {
                                return [[24. 17.]]
                                return 0 0  ( 24 examples )
                                return 1 1  ( 17 examples )
                            }
                            else {
                                return [[4. 0.]]
                                return 0 0  ( 4 examples )
                            }
                        }
                    }
                }
            }
            else {
                if ( x7 <= 0.5 ) {
                    return [[234.  55.]]
                    return 0 0  ( 234 examples )
                    return 1 1  ( 55 examples )
                }
                else {
                    if ( x16 <= 0.5 ) {
                        return [[46. 27.]]
                        return 0 0  ( 46 examples )
                        return 1 1  ( 27 examples )
                    }
                    else {
                        return [[27.  5.]]
                        return 0 0  ( 27 examples )
                        return 1 1  ( 5 examples )
                    }
                }
            }
        }
        else {
            if ( x15 <= 0.5 ) {
                if ( x11 <= 0.5 ) {
                    if ( x9 <= 0.5 ) {
                        if ( x7 <= 0.5 ) {
                            return [[66. 14.]]
                            return 0 0  ( 66 examples )
                            return 1 1  ( 14 examples )
                        }
                        else {
                            return [[37.  1.]]
                            return 0 0  ( 37 examples )
                            return 1 1  ( 1 examples )
                        }
                    }
                    else {
                        if ( x7 <= 0.5 ) {
                            return [[5. 1.]]
                            return 0 0  ( 5 examples )
                            return 1 1  ( 1 examples )
                        }
                        else {
                            return [[0. 3.]]
                            return 1 1  ( 3 examples )
                        }
                    }
                }
                else {
                    return [[90. 29.]]
                    return 0 0  ( 90 examples )
                    return 1 1  ( 29 examples )
                }
            }
            else {
                if ( x14 <= 0.5 ) {
                    if ( x9 <= 0.5 ) {
                        if ( x11 <= 0.5 ) {
                            return [[27.  3.]]
                            return 0 0  ( 27 examples )
                            return 1 1  ( 3 examples )
                        }
                        else {
                            return [[39. 15.]]
                            return 0 0  ( 39 examples )
                            return 1 1  ( 15 examples )
                        }
                    }
                    else {
                        return [[1. 4.]]
                        return 0 0  ( 1 examples )
                        return 1 1  ( 4 examples )
                    }
                }
                else {
                    if ( x4 <= 0.5 ) {
                        if ( x11 <= 0.5 ) {
                            return [[24.  5.]]
                            return 0 0  ( 24 examples )
                            return 1 1  ( 5 examples )
                        }
                        else {
                            return [[44. 28.]]
                            return 0 0  ( 44 examples )
                            return 1 1  ( 28 examples )
                        }
                    }
                    else {
                        return [[23. 25.]]
                        return 0 0  ( 23 examples )
                        return 1 1  ( 25 examples )
                    }
                }
            }
        }
    }
    else {
        if ( x8 <= 0.5 ) {
            if ( x2 <= 0.5 ) {
                if ( x15 <= 0.5 ) {
                    if ( x4 <= 0.5 ) {
                        if ( x14 <= 0.5 ) {
                            return [[254.  31.]]
                            return 0 0  ( 254 examples )
                            return 1 1  ( 31 examples )
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                return [[86. 34.]]
                                return 0 0  ( 86 examples )
                                return 1 1  ( 34 examples )
                            }
                            else {
                                return [[159.  33.]]
                                return 0 0  ( 159 examples )
                                return 1 1  ( 33 examples )
                            }
                        }
                    }
                    else {
                        if ( x7 <= 0.5 ) {
                            return [[129.  34.]]
                            return 0 0  ( 129 examples )
                            return 1 1  ( 34 examples )
                        }
                        else {
                            if ( x9 <= 0.5 ) {
                                return [[159.  69.]]
                                return 0 0  ( 159 examples )
                                return 1 1  ( 69 examples )
                            }
                            else {
                                if ( x6 <= 0.5 ) {
                                    return [[ 5. 14.]]
                                    return 0 0  ( 5 examples )
                                    return 1 1  ( 14 examples )
                                }
                                else {
                                    return [[5. 0.]]
                                    return 0 0  ( 5 examples )
                                }
                            }
                        }
                    }
                }
                else {
                    if ( x12 <= 0.5 ) {
                        if ( x10 <= 0.5 ) {
                            if ( x16 <= 0.5 ) {
                                return [[91. 13.]]
                                return 0 0  ( 91 examples )
                                return 1 1  ( 13 examples )
                            }
                            else {
                                return [[25. 17.]]
                                return 0 0  ( 25 examples )
                                return 1 1  ( 17 examples )
                            }
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                if ( x9 <= 0.5 ) {
                                    return [[47. 13.]]
                                    return 0 0  ( 47 examples )
                                    return 1 1  ( 13 examples )
                                }
                                else {
                                    return [[5. 5.]]
                                    return 0 0  ( 5 examples )
                                    return 1 1  ( 5 examples )
                                }
                            }
                            else {
                                return [[156.  89.]]
                                return 0 0  ( 156 examples )
                                return 1 1  ( 89 examples )
                            }
                        }
                    }
                    else {
                        if ( x7 <= 0.5 ) {
                            if ( x16 <= 0.5 ) {
                                return [[16.  8.]]
                                return 0 0  ( 16 examples )
                                return 1 1  ( 8 examples )
                            }
                            else {
                                return [[13.  1.]]
                                return 0 0  ( 13 examples )
                                return 1 1  ( 1 examples )
                            }
                        }
                        else {
                            if ( x5 <= 0.5 ) {
                                return [[95. 70.]]
                                return 0 0  ( 95 examples )
                                return 1 1  ( 70 examples )
                            }
                            else {
                                if ( x6 <= 0.5 ) {
                                    return [[ 2. 13.]]
                                    return 0 0  ( 2 examples )
                                    return 1 1  ( 13 examples )
                                }
                                else {
                                    return [[2. 1.]]
                                    return 0 0  ( 2 examples )
                                    return 1 1  ( 1 examples )
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        if ( x12 <= 0.5 ) {
                            return [[136.  36.]]
                            return 0 0  ( 136 examples )
                            return 1 1  ( 36 examples )
                        }
                        else {
                            return [[26. 15.]]
                            return 0 0  ( 26 examples )
                            return 1 1  ( 15 examples )
                        }
                    }
                    else {
                        if ( x12 <= 0.5 ) {
                            if ( x7 <= 0.5 ) {
                                return [[21.  6.]]
                                return 0 0  ( 21 examples )
                                return 1 1  ( 6 examples )
                            }
                            else {
                                return [[132.  91.]]
                                return 0 0  ( 132 examples )
                                return 1 1  ( 91 examples )
                            }
                        }
                        else {
                            if ( x6 <= 0.5 ) {
                                if ( x4 <= 0.5 ) {
                                    return [[19.  8.]]
                                    return 0 0  ( 19 examples )
                                    return 1 1  ( 8 examples )
                                }
                                else {
                                    return [[24. 25.]]
                                    return 0 0  ( 24 examples )
                                    return 1 1  ( 25 examples )
                                }
                            }
                            else {
                                if ( x4 <= 0.5 ) {
                                    if ( x11 <= 0.5 ) {
                                        return [[2. 0.]]
                                        return 0 0  ( 2 examples )
                                    }
                                    else {
                                        return [[ 8. 12.]]
                                        return 0 0  ( 8 examples )
                                        return 1 1  ( 12 examples )
                                    }
                                }
                                else {
                                    return [[0. 5.]]
                                    return 1 1  ( 5 examples )
                                }
                            }
                        }
                    }
                }
                else {
                    if ( x16 <= 0.5 ) {
                        if ( x9 <= 0.5 ) {
                            if ( x5 <= 0.5 ) {
                                if ( x6 <= 0.5 ) {
                                    if ( x11 <= 0.5 ) {
                                        return [[13.  1.]]
                                        return 0 0  ( 13 examples )
                                        return 1 1  ( 1 examples )
                                    }
                                    else {
                                        if ( x12 <= 0.5 ) {
                                            return [[27. 11.]]
                                            return 0 0  ( 27 examples )
                                            return 1 1  ( 11 examples )
                                        }
                                        else {
                                            return [[14. 13.]]
                                            return 0 0  ( 14 examples )
                                            return 1 1  ( 13 examples )
                                        }
                                    }
                                }
                                else {
                                    return [[82. 66.]]
                                    return 0 0  ( 82 examples )
                                    return 1 1  ( 66 examples )
                                }
                            }
                            else {
                                if ( x14 <= 0.5 ) {
                                    return [[9. 5.]]
                                    return 0 0  ( 9 examples )
                                    return 1 1  ( 5 examples )
                                }
                                else {
                                    return [[ 5. 15.]]
                                    return 0 0  ( 5 examples )
                                    return 1 1  ( 15 examples )
                                }
                            }
                        }
                        else {
                            return [[42. 52.]]
                            return 0 0  ( 42 examples )
                            return 1 1  ( 52 examples )
                        }
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[28. 23.]]
                            return 0 0  ( 28 examples )
                            return 1 1  ( 23 examples )
                        }
                        else {
                            if ( x6 <= 0.5 ) {
                                return [[25. 32.]]
                                return 0 0  ( 25 examples )
                                return 1 1  ( 32 examples )
                            }
                            else {
                                return [[11. 47.]]
                                return 0 0  ( 11 examples )
                                return 1 1  ( 47 examples )
                            }
                        }
                    }
                }
            }
        }
        else {
            if ( x2 <= 0.5 ) {
                if ( x9 <= 0.5 ) {
                    if ( x13 <= 0.5 ) {
                        return [[43. 17.]]
                        return 0 0  ( 43 examples )
                        return 1 1  ( 17 examples )
                    }
                    else {
                        if ( x16 <= 0.5 ) {
                            if ( x10 <= 0.5 ) {
                                if ( x6 <= 0.5 ) {
                                    return [[50. 14.]]
                                    return 0 0  ( 50 examples )
                                    return 1 1  ( 14 examples )
                                }
                                else {
                                    if ( x4 <= 0.5 ) {
                                        if ( x14 <= 0.5 ) {
                                            if ( x15 <= 0.5 ) {
                                                return [[0. 4.]]
                                                return 1 1  ( 4 examples )
                                            }
                                            else {
                                                return [[5. 4.]]
                                                return 0 0  ( 5 examples )
                                                return 1 1  ( 4 examples )
                                            }
                                        }
                                        else {
                                            return [[27. 17.]]
                                            return 0 0  ( 27 examples )
                                            return 1 1  ( 17 examples )
                                        }
                                    }
                                    else {
                                        return [[0. 3.]]
                                        return 1 1  ( 3 examples )
                                    }
                                }
                            }
                            else {
                                if ( x5 <= 0.5 ) {
                                    return [[466. 395.]]
                                    return 0 0  ( 466 examples )
                                    return 1 1  ( 395 examples )
                                }
                                else {
                                    if ( x12 <= 0.5 ) {
                                        return [[13. 11.]]
                                        return 0 0  ( 13 examples )
                                        return 1 1  ( 11 examples )
                                    }
                                    else {
                                        return [[ 6. 17.]]
                                        return 0 0  ( 6 examples )
                                        return 1 1  ( 17 examples )
                                    }
                                }
                            }
                        }
                        else {
                            if ( x7 <= 0.5 ) {
                                return [[9. 5.]]
                                return 0 0  ( 9 examples )
                                return 1 1  ( 5 examples )
                            }
                            else {
                                if ( x10 <= 0.5 ) {
                                    if ( x12 <= 0.5 ) {
                                        return [[15. 10.]]
                                        return 0 0  ( 15 examples )
                                        return 1 1  ( 10 examples )
                                    }
                                    else {
                                        return [[ 6. 11.]]
                                        return 0 0  ( 6 examples )
                                        return 1 1  ( 11 examples )
                                    }
                                }
                                else {
                                    return [[13. 34.]]
                                    return 0 0  ( 13 examples )
                                    return 1 1  ( 34 examples )
                                }
                            }
                        }
                    }
                }
                else {
                    if ( x15 <= 0.5 ) {
                        if ( x11 <= 0.5 ) {
                            return [[8. 5.]]
                            return 0 0  ( 8 examples )
                            return 1 1  ( 5 examples )
                        }
                        else {
                            return [[ 5. 11.]]
                            return 0 0  ( 5 examples )
                            return 1 1  ( 11 examples )
                        }
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[3. 0.]]
                            return 0 0  ( 3 examples )
                        }
                        else {
                            if ( x5 <= 0.5 ) {
                                return [[ 9. 18.]]
                                return 0 0  ( 9 examples )
                                return 1 1  ( 18 examples )
                            }
                            else {
                                return [[ 2. 19.]]
                                return 0 0  ( 2 examples )
                                return 1 1  ( 19 examples )
                            }
                        }
                    }
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    if ( x12 <= 0.5 ) {
                        if ( x9 <= 0.5 ) {
                            return [[68. 61.]]
                            return 0 0  ( 68 examples )
                            return 1 1  ( 61 examples )
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                return [[4. 1.]]
                                return 0 0  ( 4 examples )
                                return 1 1  ( 1 examples )
                            }
                            else {
                                if ( x7 <= 0.5 ) {
                                    return [[3. 3.]]
                                    return 0 0  ( 3 examples )
                                    return 1 1  ( 3 examples )
                                }
                                else {
                                    return [[ 1. 11.]]
                                    return 0 0  ( 1 examples )
                                    return 1 1  ( 11 examples )
                                }
                            }
                        }
                    }
                    else {
                        if ( x7 <= 0.5 ) {
                            return [[10.  7.]]
                            return 0 0  ( 10 examples )
                            return 1 1  ( 7 examples )
                        }
                        else {
                            return [[16. 49.]]
                            return 0 0  ( 16 examples )
                            return 1 1  ( 49 examples )
                        }
                    }
                }
                else {
                    if ( x6 <= 0.5 ) {
                        if ( x7 <= 0.5 ) {
                            return [[9. 7.]]
                            return 0 0  ( 9 examples )
                            return 1 1  ( 7 examples )
                        }
                        else {
                            return [[30. 57.]]
                            return 0 0  ( 30 examples )
                            return 1 1  ( 57 examples )
                        }
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[19. 51.]]
                            return 0 0  ( 19 examples )
                            return 1 1  ( 51 examples )
                        }
                        else {
                            return [[ 16. 108.]]
                            return 0 0  ( 16 examples )
                            return 1 1  ( 108 examples )
                        }
                    }
                }
            }
        }
    }
}
else {
    if ( x8 <= 0.5 ) {
        if ( x13 <= 0.5 ) {
            if ( x4 <= 0.5 ) {
                return [[5. 0.]]
                return 0 0  ( 5 examples )
            }
            else {
                return [[48. 26.]]
                return 0 0  ( 48 examples )
                return 1 1  ( 26 examples )
            }
        }
        else {
            if ( x4 <= 0.5 ) {
                if ( x11 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        return [[12.  2.]]
                        return 0 0  ( 12 examples )
                        return 1 1  ( 2 examples )
                    }
                    else {
                        return [[11.  8.]]
                        return 0 0  ( 11 examples )
                        return 1 1  ( 8 examples )
                    }
                }
                else {
                    if ( x12 <= 0.5 ) {
                        if ( x6 <= 0.5 ) {
                            return [[5. 1.]]
                            return 0 0  ( 5 examples )
                            return 1 1  ( 1 examples )
                        }
                        else {
                            return [[42. 42.]]
                            return 0 0  ( 42 examples )
                            return 1 1  ( 42 examples )
                        }
                    }
                    else {
                        if ( x7 <= 0.5 ) {
                            return [[2. 0.]]
                            return 0 0  ( 2 examples )
                        }
                        else {
                            if ( x10 <= 0.5 ) {
                                return [[5. 3.]]
                                return 0 0  ( 5 examples )
                                return 1 1  ( 3 examples )
                            }
                            else {
                                return [[21. 45.]]
                                return 0 0  ( 21 examples )
                                return 1 1  ( 45 examples )
                            }
                        }
                    }
                }
            }
            else {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        return [[22. 12.]]
                        return 0 0  ( 22 examples )
                        return 1 1  ( 12 examples )
                    }
                    else {
                        if ( x15 <= 0.5 ) {
                            return [[77. 95.]]
                            return 0 0  ( 77 examples )
                            return 1 1  ( 95 examples )
                        }
                        else {
                            if ( x12 <= 0.5 ) {
                                return [[32. 55.]]
                                return 0 0  ( 32 examples )
                                return 1 1  ( 55 examples )
                            }
                            else {
                                return [[15. 48.]]
                                return 0 0  ( 15 examples )
                                return 1 1  ( 48 examples )
                            }
                        }
                    }
                }
                else {
                    if ( x5 <= 0.5 ) {
                        if ( x14 <= 0.5 ) {
                            return [[53. 76.]]
                            return 0 0  ( 53 examples )
                            return 1 1  ( 76 examples )
                        }
                        else {
                            if ( x12 <= 0.5 ) {
                                return [[ 64. 110.]]
                                return 0 0  ( 64 examples )
                                return 1 1  ( 110 examples )
                            }
                            else {
                                return [[ 46. 124.]]
                                return 0 0  ( 46 examples )
                                return 1 1  ( 124 examples )
                            }
                        }
                    }
                    else {
                        if ( x10 <= 0.5 ) {
                            return [[21. 25.]]
                            return 0 0  ( 21 examples )
                            return 1 1  ( 25 examples )
                        }
                        else {
                            if ( x12 <= 0.5 ) {
                                return [[120. 320.]]
                                return 0 0  ( 120 examples )
                                return 1 1  ( 320 examples )
                            }
                            else {
                                if ( x15 <= 0.5 ) {
                                    return [[ 46. 193.]]
                                    return 0 0  ( 46 examples )
                                    return 1 1  ( 193 examples )
                                }
                                else {
                                    if ( x11 <= 0.5 ) {
                                        return [[2. 1.]]
                                        return 0 0  ( 2 examples )
                                        return 1 1  ( 1 examples )
                                    }
                                    else {
                                        return [[ 18. 154.]]
                                        return 0 0  ( 18 examples )
                                        return 1 1  ( 154 examples )
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ( x10 <= 0.5 ) {
            return [[24. 34.]]
            return 0 0  ( 24 examples )
            return 1 1  ( 34 examples )
        }
        else {
            if ( x4 <= 0.5 ) {
                return [[32. 84.]]
                return 0 0  ( 32 examples )
                return 1 1  ( 84 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    if ( x12 <= 0.5 ) {
                        if ( x11 <= 0.5 ) {
                            return [[ 2. 18.]]
                            return 0 0  ( 2 examples )
                            return 1 1  ( 18 examples )
                        }
                        else {
                            return [[31. 72.]]
                            return 0 0  ( 31 examples )
                            return 1 1  ( 72 examples )
                        }
                    }
                    else {
                        return [[ 22. 103.]]
                        return 0 0  ( 22 examples )
                        return 1 1  ( 103 examples )
                    }
                }
                else {
                    if ( x15 <= 0.5 ) {
                        if ( x5 <= 0.5 ) {
                            if ( x12 <= 0.5 ) {
                                if ( x14 <= 0.5 ) {
                                    return [[15. 25.]]
                                    return 0 0  ( 15 examples )
                                    return 1 1  ( 25 examples )
                                }
                                else {
                                    if ( x16 <= 0.5 ) {
                                        return [[11. 46.]]
                                        return 0 0  ( 11 examples )
                                        return 1 1  ( 46 examples )
                                    }
                                    else {
                                        return [[2. 0.]]
                                        return 0 0  ( 2 examples )
                                    }
                                }
                            }
                            else {
                                return [[14. 74.]]
                                return 0 0  ( 14 examples )
                                return 1 1  ( 74 examples )
                            }
                        }
                        else {
                            if ( x11 <= 0.5 ) {
                                return [[19. 68.]]
                                return 0 0  ( 19 examples )
                                return 1 1  ( 68 examples )
                            }
                            else {
                                if ( x9 <= 0.5 ) {
                                    return [[ 19. 218.]]
                                    return 0 0  ( 19 examples )
                                    return 1 1  ( 218 examples )
                                }
                                else {
                                    return [[ 26. 144.]]
                                    return 0 0  ( 26 examples )
                                    return 1 1  ( 144 examples )
                                }
                            }
                        }
                    }
                    else {
                        return [[ 62. 522.]]
                        return 0 0  ( 62 examples )
                        return 1 1  ( 522 examples )
                    }
                }
            }
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.00089097023
lambda:  0.0001
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.27636122956305575
Accuracy:  0.7355387704369443
COUNT of the best tree:  0
time when the best tree is achieved:  0.023024797439575195
TOTAL COUNT:  35193603
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
^Z
[2]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7.286131143569946
lambda:  0.05
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.40404436370589925
Accuracy:  0.6959556362941007
COUNT of the best tree:  4
time when the best tree is achieved:  0.11078310012817383
TOTAL COUNT:  404
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1849.733875989914
lambda:  0.0004
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.28926941390190264
Accuracy:  0.7139305860980973
COUNT of the best tree:  5954
time when the best tree is achieved:  4.5152692794799805
TOTAL COUNT:  38441512
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
if ( x1 <= 0.5 ) {
    if ( x3 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x12 <= 0.5 ) {
                return [[1121.  179.]]
                return 0 0  ( 1121 examples )
                return 1 1  ( 179 examples )
            }
            else {
                return [[307.  87.]]
                return 0 0  ( 307 examples )
                return 1 1  ( 87 examples )
            }
        }
        else {
            if ( x15 <= 0.5 ) {
                return [[198.  48.]]
                return 0 0  ( 198 examples )
                return 1 1  ( 48 examples )
            }
            else {
                return [[158.  80.]]
                return 0 0  ( 158 examples )
                return 1 1  ( 80 examples )
            }
        }
    }
    else {
        if ( x8 <= 0.5 ) {
            if ( x2 <= 0.5 ) {
                if ( x15 <= 0.5 ) {
                    if ( x4 <= 0.5 ) {
                        if ( x14 <= 0.5 ) {
                            return [[254.  31.]]
                            return 0 0  ( 254 examples )
                            return 1 1  ( 31 examples )
                        }
                        else {
                            return [[245.  67.]]
                            return 0 0  ( 245 examples )
                            return 1 1  ( 67 examples )
                        }
                    }
                    else {
                        return [[298. 117.]]
                        return 0 0  ( 298 examples )
                        return 1 1  ( 117 examples )
                    }
                }
                else {
                    if ( x12 <= 0.5 ) {
                        if ( x10 <= 0.5 ) {
                            if ( x16 <= 0.5 ) {
                                return [[91. 13.]]
                                return 0 0  ( 91 examples )
                                return 1 1  ( 13 examples )
                            }
                            else {
                                return [[25. 17.]]
                                return 0 0  ( 25 examples )
                                return 1 1  ( 17 examples )
                            }
                        }
                        else {
                            return [[208. 107.]]
                            return 0 0  ( 208 examples )
                            return 1 1  ( 107 examples )
                        }
                    }
                    else {
                        return [[128.  93.]]
                        return 0 0  ( 128 examples )
                        return 1 1  ( 93 examples )
                    }
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        return [[162.  51.]]
                        return 0 0  ( 162 examples )
                        return 1 1  ( 51 examples )
                    }
                    else {
                        return [[206. 147.]]
                        return 0 0  ( 206 examples )
                        return 1 1  ( 147 examples )
                    }
                }
                else {
                    if ( x16 <= 0.5 ) {
                        return [[192. 163.]]
                        return 0 0  ( 192 examples )
                        return 1 1  ( 163 examples )
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[28. 23.]]
                            return 0 0  ( 28 examples )
                            return 1 1  ( 23 examples )
                        }
                        else {
                            if ( x6 <= 0.5 ) {
                                return [[25. 32.]]
                                return 0 0  ( 25 examples )
                                return 1 1  ( 32 examples )
                            }
                            else {
                                return [[11. 47.]]
                                return 0 0  ( 11 examples )
                                return 1 1  ( 47 examples )
                            }
                        }
                    }
                }
            }
        }
        else {
            if ( x2 <= 0.5 ) {
                if ( x9 <= 0.5 ) {
                    if ( x13 <= 0.5 ) {
                        return [[43. 17.]]
                        return 0 0  ( 43 examples )
                        return 1 1  ( 17 examples )
                    }
                    else {
                        if ( x16 <= 0.5 ) {
                            if ( x10 <= 0.5 ) {
                                if ( x6 <= 0.5 ) {
                                    return [[50. 14.]]
                                    return 0 0  ( 50 examples )
                                    return 1 1  ( 14 examples )
                                }
                                else {
                                    return [[32. 28.]]
                                    return 0 0  ( 32 examples )
                                    return 1 1  ( 28 examples )
                                }
                            }
                            else {
                                return [[485. 423.]]
                                return 0 0  ( 485 examples )
                                return 1 1  ( 423 examples )
                            }
                        }
                        else {
                            return [[43. 60.]]
                            return 0 0  ( 43 examples )
                            return 1 1  ( 60 examples )
                        }
                    }
                }
                else {
                    return [[27. 53.]]
                    return 0 0  ( 27 examples )
                    return 1 1  ( 53 examples )
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    if ( x12 <= 0.5 ) {
                        return [[76. 76.]]
                        return 0 0  ( 76 examples )
                        return 1 1  ( 76 examples )
                    }
                    else {
                        if ( x7 <= 0.5 ) {
                            return [[10.  7.]]
                            return 0 0  ( 10 examples )
                            return 1 1  ( 7 examples )
                        }
                        else {
                            return [[16. 49.]]
                            return 0 0  ( 16 examples )
                            return 1 1  ( 49 examples )
                        }
                    }
                }
                else {
                    if ( x6 <= 0.5 ) {
                        return [[39. 64.]]
                        return 0 0  ( 39 examples )
                        return 1 1  ( 64 examples )
                    }
                    else {
                        return [[ 35. 159.]]
                        return 0 0  ( 35 examples )
                        return 1 1  ( 159 examples )
                    }
                }
            }
        }
    }
}
else {
    if ( x8 <= 0.5 ) {
        if ( x13 <= 0.5 ) {
            return [[53. 26.]]
            return 0 0  ( 53 examples )
            return 1 1  ( 26 examples )
        }
        else {
            if ( x4 <= 0.5 ) {
                if ( x11 <= 0.5 ) {
                    return [[23. 10.]]
                    return 0 0  ( 23 examples )
                    return 1 1  ( 10 examples )
                }
                else {
                    return [[75. 91.]]
                    return 0 0  ( 75 examples )
                    return 1 1  ( 91 examples )
                }
            }
            else {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        return [[22. 12.]]
                        return 0 0  ( 22 examples )
                        return 1 1  ( 12 examples )
                    }
                    else {
                        return [[124. 198.]]
                        return 0 0  ( 124 examples )
                        return 1 1  ( 198 examples )
                    }
                }
                else {
                    if ( x5 <= 0.5 ) {
                        return [[163. 310.]]
                        return 0 0  ( 163 examples )
                        return 1 1  ( 310 examples )
                    }
                    else {
                        if ( x10 <= 0.5 ) {
                            return [[21. 25.]]
                            return 0 0  ( 21 examples )
                            return 1 1  ( 25 examples )
                        }
                        else {
                            if ( x12 <= 0.5 ) {
                                return [[120. 320.]]
                                return 0 0  ( 120 examples )
                                return 1 1  ( 320 examples )
                            }
                            else {
                                return [[ 66. 348.]]
                                return 0 0  ( 66 examples )
                                return 1 1  ( 348 examples )
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ( x10 <= 0.5 ) {
            return [[24. 34.]]
            return 0 0  ( 24 examples )
            return 1 1  ( 34 examples )
        }
        else {
            if ( x4 <= 0.5 ) {
                return [[32. 84.]]
                return 0 0  ( 32 examples )
                return 1 1  ( 84 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    return [[ 55. 193.]]
                    return 0 0  ( 55 examples )
                    return 1 1  ( 193 examples )
                }
                else {
                    return [[ 168. 1097.]]
                    return 0 0  ( 168 examples )
                    return 1 1  ( 1097 examples )
                }
            }
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1822.7254021167755
lambda:  0.0003
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.28766093316760677
Accuracy:  0.7246390668323932
COUNT of the best tree:  0
time when the best tree is achieved:  0.022535324096679688
TOTAL COUNT:  36585555
^Z
[3]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
if ( x1 <= 0.5 ) {
    if ( x3 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x12 <= 0.5 ) {
                return [[1121.  179.]]
                return 0 0  ( 1121 examples )
                return 1 1  ( 179 examples )
            }
            else {
                return [[307.  87.]]
                return 0 0  ( 307 examples )
                return 1 1  ( 87 examples )
            }
        }
        else {
            if ( x15 <= 0.5 ) {
                return [[198.  48.]]
                return 0 0  ( 198 examples )
                return 1 1  ( 48 examples )
            }
            else {
                return [[158.  80.]]
                return 0 0  ( 158 examples )
                return 1 1  ( 80 examples )
            }
        }
    }
    else {
        if ( x8 <= 0.5 ) {
            if ( x2 <= 0.5 ) {
                if ( x15 <= 0.5 ) {
                    if ( x4 <= 0.5 ) {
                        return [[499.  98.]]
                        return 0 0  ( 499 examples )
                        return 1 1  ( 98 examples )
                    }
                    else {
                        return [[298. 117.]]
                        return 0 0  ( 298 examples )
                        return 1 1  ( 117 examples )
                    }
                }
                else {
                    if ( x12 <= 0.5 ) {
                        return [[324. 137.]]
                        return 0 0  ( 324 examples )
                        return 1 1  ( 137 examples )
                    }
                    else {
                        return [[128.  93.]]
                        return 0 0  ( 128 examples )
                        return 1 1  ( 93 examples )
                    }
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        return [[162.  51.]]
                        return 0 0  ( 162 examples )
                        return 1 1  ( 51 examples )
                    }
                    else {
                        return [[206. 147.]]
                        return 0 0  ( 206 examples )
                        return 1 1  ( 147 examples )
                    }
                }
                else {
                    if ( x16 <= 0.5 ) {
                        return [[192. 163.]]
                        return 0 0  ( 192 examples )
                        return 1 1  ( 163 examples )
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[28. 23.]]
                            return 0 0  ( 28 examples )
                            return 1 1  ( 23 examples )
                        }
                        else {
                            return [[36. 79.]]
                            return 0 0  ( 36 examples )
                            return 1 1  ( 79 examples )
                        }
                    }
                }
            }
        }
        else {
            if ( x2 <= 0.5 ) {
                if ( x9 <= 0.5 ) {
                    if ( x13 <= 0.5 ) {
                        return [[43. 17.]]
                        return 0 0  ( 43 examples )
                        return 1 1  ( 17 examples )
                    }
                    else {
                        return [[610. 525.]]
                        return 0 0  ( 610 examples )
                        return 1 1  ( 525 examples )
                    }
                }
                else {
                    return [[27. 53.]]
                    return 0 0  ( 27 examples )
                    return 1 1  ( 53 examples )
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    return [[102. 132.]]
                    return 0 0  ( 102 examples )
                    return 1 1  ( 132 examples )
                }
                else {
                    if ( x6 <= 0.5 ) {
                        return [[39. 64.]]
                        return 0 0  ( 39 examples )
                        return 1 1  ( 64 examples )
                    }
                    else {
                        return [[ 35. 159.]]
                        return 0 0  ( 35 examples )
                        return 1 1  ( 159 examples )
                    }
                }
            }
        }
    }
}
else {
    if ( x8 <= 0.5 ) {
        if ( x13 <= 0.5 ) {
            return [[53. 26.]]
            return 0 0  ( 53 examples )
            return 1 1  ( 26 examples )
        }
        else {
            if ( x4 <= 0.5 ) {
                return [[ 98. 101.]]
                return 0 0  ( 98 examples )
                return 1 1  ( 101 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        return [[22. 12.]]
                        return 0 0  ( 22 examples )
                        return 1 1  ( 12 examples )
                    }
                    else {
                        return [[124. 198.]]
                        return 0 0  ( 124 examples )
                        return 1 1  ( 198 examples )
                    }
                }
                else {
                    if ( x5 <= 0.5 ) {
                        return [[163. 310.]]
                        return 0 0  ( 163 examples )
                        return 1 1  ( 310 examples )
                    }
                    else {
                        if ( x10 <= 0.5 ) {
                            return [[21. 25.]]
                            return 0 0  ( 21 examples )
                            return 1 1  ( 25 examples )
                        }
                        else {
                            if ( x12 <= 0.5 ) {
                                return [[120. 320.]]
                                return 0 0  ( 120 examples )
                                return 1 1  ( 320 examples )
                            }
                            else {
                                return [[ 66. 348.]]
                                return 0 0  ( 66 examples )
                                return 1 1  ( 348 examples )
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ( x10 <= 0.5 ) {
            return [[24. 34.]]
            return 0 0  ( 24 examples )
            return 1 1  ( 34 examples )
        }
        else {
            return [[ 255. 1374.]]
            return 0 0  ( 255 examples )
            return 1 1  ( 1374 examples )
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0092463493347
lambda:  0.00035
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.288666110526819
Accuracy:  0.721483889473181
COUNT of the best tree:  0
time when the best tree is achieved:  0.022713184356689453
TOTAL COUNT:  36869559
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
if ( x1 <= 0.5 ) {
    if ( x3 <= 0.5 ) {
        if ( x8 <= 0.5 ) {
            if ( x12 <= 0.5 ) {
                return [[1121.  179.]]
                return 0 0  ( 1121 examples )
                return 1 1  ( 179 examples )
            }
            else {
                return [[307.  87.]]
                return 0 0  ( 307 examples )
                return 1 1  ( 87 examples )
            }
        }
        else {
            if ( x15 <= 0.5 ) {
                return [[198.  48.]]
                return 0 0  ( 198 examples )
                return 1 1  ( 48 examples )
            }
            else {
                return [[158.  80.]]
                return 0 0  ( 158 examples )
                return 1 1  ( 80 examples )
            }
        }
    }
    else {
        if ( x8 <= 0.5 ) {
            if ( x2 <= 0.5 ) {
                if ( x15 <= 0.5 ) {
                    if ( x4 <= 0.5 ) {
                        return [[499.  98.]]
                        return 0 0  ( 499 examples )
                        return 1 1  ( 98 examples )
                    }
                    else {
                        return [[298. 117.]]
                        return 0 0  ( 298 examples )
                        return 1 1  ( 117 examples )
                    }
                }
                else {
                    if ( x12 <= 0.5 ) {
                        return [[324. 137.]]
                        return 0 0  ( 324 examples )
                        return 1 1  ( 137 examples )
                    }
                    else {
                        return [[128.  93.]]
                        return 0 0  ( 128 examples )
                        return 1 1  ( 93 examples )
                    }
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    if ( x14 <= 0.5 ) {
                        return [[162.  51.]]
                        return 0 0  ( 162 examples )
                        return 1 1  ( 51 examples )
                    }
                    else {
                        return [[206. 147.]]
                        return 0 0  ( 206 examples )
                        return 1 1  ( 147 examples )
                    }
                }
                else {
                    if ( x16 <= 0.5 ) {
                        return [[192. 163.]]
                        return 0 0  ( 192 examples )
                        return 1 1  ( 163 examples )
                    }
                    else {
                        if ( x4 <= 0.5 ) {
                            return [[28. 23.]]
                            return 0 0  ( 28 examples )
                            return 1 1  ( 23 examples )
                        }
                        else {
                            return [[36. 79.]]
                            return 0 0  ( 36 examples )
                            return 1 1  ( 79 examples )
                        }
                    }
                }
            }
        }
        else {
            if ( x2 <= 0.5 ) {
                if ( x9 <= 0.5 ) {
                    return [[653. 542.]]
                    return 0 0  ( 653 examples )
                    return 1 1  ( 542 examples )
                }
                else {
                    return [[27. 53.]]
                    return 0 0  ( 27 examples )
                    return 1 1  ( 53 examples )
                }
            }
            else {
                if ( x15 <= 0.5 ) {
                    return [[102. 132.]]
                    return 0 0  ( 102 examples )
                    return 1 1  ( 132 examples )
                }
                else {
                    if ( x6 <= 0.5 ) {
                        return [[39. 64.]]
                        return 0 0  ( 39 examples )
                        return 1 1  ( 64 examples )
                    }
                    else {
                        return [[ 35. 159.]]
                        return 0 0  ( 35 examples )
                        return 1 1  ( 159 examples )
                    }
                }
            }
        }
    }
}
else {
    if ( x8 <= 0.5 ) {
        if ( x13 <= 0.5 ) {
            return [[53. 26.]]
            return 0 0  ( 53 examples )
            return 1 1  ( 26 examples )
        }
        else {
            if ( x4 <= 0.5 ) {
                return [[ 98. 101.]]
                return 0 0  ( 98 examples )
                return 1 1  ( 101 examples )
            }
            else {
                if ( x6 <= 0.5 ) {
                    if ( x7 <= 0.5 ) {
                        return [[22. 12.]]
                        return 0 0  ( 22 examples )
                        return 1 1  ( 12 examples )
                    }
                    else {
                        return [[124. 198.]]
                        return 0 0  ( 124 examples )
                        return 1 1  ( 198 examples )
                    }
                }
                else {
                    if ( x5 <= 0.5 ) {
                        return [[163. 310.]]
                        return 0 0  ( 163 examples )
                        return 1 1  ( 310 examples )
                    }
                    else {
                        if ( x10 <= 0.5 ) {
                            return [[21. 25.]]
                            return 0 0  ( 21 examples )
                            return 1 1  ( 25 examples )
                        }
                        else {
                            if ( x12 <= 0.5 ) {
                                return [[120. 320.]]
                                return 0 0  ( 120 examples )
                                return 1 1  ( 320 examples )
                            }
                            else {
                                return [[ 66. 348.]]
                                return 0 0  ( 66 examples )
                                return 1 1  ( 348 examples )
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ( x10 <= 0.5 ) {
            return [[24. 34.]]
            return 0 0  ( 24 examples )
            return 1 1  ( 34 examples )
        }
        else {
            return [[ 255. 1374.]]
            return 0 0  ( 255 examples )
            return 1 1  ( 1374 examples )
        }
    }
}
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0018908977509
lambda:  0.000375
leaves:  NA
num_captured:  NA
num_captured_incorrect:  NA
prediction:  NA
Objective:  0.289016110526819
Accuracy:  0.721483889473181
COUNT of the best tree:  0
time when the best tree is achieved:  0.023849964141845703
TOTAL COUNT:  37316304
^Z
[4]+  Stopped                 python3.7 test_accuracy.py
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1888.6298949718475
lambda:  0.0003875
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.28916941390190265
Accuracy:  0.7139305860980973
COUNT of the best tree:  5954
time when the best tree is achieved:  4.519474029541016
TOTAL COUNT:  38447203
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  7.83742880821228
lambda:  0.05
leaves:  [(-2,), (2,)]
num_captured:  [5147, 5312]
num_captured_incorrect:  [1434, 1746]
prediction:  [0, 1]
Objective:  0.40404436370589925
Accuracy:  0.6959556362941007
COUNT of the best tree:  4
time when the best tree is achieved:  0.11424469947814941
TOTAL COUNT:  404
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.000461101532
lambda:  0.005
leaves:  [(-3,), (-8, -1, 3), (-8, 1, 3), (-2, 3, 8), (2, 3, 8)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.313650922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  842655
time when the best tree is achieved:  68.77116322517395
TOTAL COUNT:  33348716
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0012657642365
lambda:  0.0035
leaves:  [(-3,), (-8, -1, 3), (-8, 1, 3), (-2, 3, 8), (2, 3, 8)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.306150922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  634486
time when the best tree is achieved:  44.8830680847168
TOTAL COUNT:  35663650
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
COUNT: 38000000
COUNT: 39000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1910.0053100585938
lambda:  0.0025
leaves:  [(-3,), (-8, -1, 3), (-8, 1, 3), (-2, 3, 8), (2, 3, 8)]
num_captured:  [2178, 2781, 2007, 1275, 2218]
num_captured_incorrect:  [394, 908, 667, 595, 455]
prediction:  [0, 0, 1, 0, 1]
Objective:  0.301150922650349
Accuracy:  0.711349077349651
COUNT of the best tree:  716885
time when the best tree is achieved:  46.21719408035278
TOTAL COUNT:  39797830
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1897.5288300514221
lambda:  0.001
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.29406941390190267
Accuracy:  0.7139305860980973
COUNT of the best tree:  5771
time when the best tree is achieved:  5.214226007461548
TOTAL COUNT:  37940056
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0002229213715
lambda:  0.00075
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.29206941390190266
Accuracy:  0.7139305860980973
COUNT of the best tree:  5905
time when the best tree is achieved:  4.556934833526611
TOTAL COUNT:  37217495
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
COUNT: 35000000
COUNT: 36000000
COUNT: 37000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0046548843384
lambda:  0.0005
leaves:  [(-3,), (1, 3, 8), (-4, -2, -1, 3), (-2, -1, 3, 4), (-8, -1, 2, 3), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1345, 1624, 1087, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 376, 664, 463, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.29006941390190266
Accuracy:  0.7139305860980973
COUNT of the best tree:  5905
time when the best tree is achieved:  4.547141790390015
TOTAL COUNT:  37905808
nrule: 17
ndata: 10459
gr: [0.077186   0.07708798 0.04644915 0.00641467 0.01495774 0.01486923
 0.0057134  0.01652376 0.03316788 0.02790318 0.00994664 0.00254574
 0.02652959 0.03950442 0.04378692 0.01825571 0.01956095]
order: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
odr: [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
the order of x's columns:  [0, 1, 2, 14, 13, 8, 9, 12, 16, 15, 7, 4, 5, 10, 3, 6, 11]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
COUNT: 30000000
COUNT: 31000000
COUNT: 32000000
COUNT: 33000000
COUNT: 34000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0018110275269
lambda:  0.00035
leaves:  [(-3,), (1, 3, 8), (-8, -2, -1, 3), (-8, -1, 2, 3), (-2, -1, 3, 8), (-1, 2, 3, 8), (-13, -8, 1, 3), (-8, 1, 3, 13)]
num_captured:  [2178, 1687, 1694, 1087, 1275, 531, 79, 1928]
num_captured_incorrect:  [394, 279, 445, 463, 595, 176, 26, 614]
prediction:  [0, 1, 0, 0, 0, 1, 0, 1]
Objective:  0.2888694139019027
Accuracy:  0.7139305860980973
COUNT of the best tree:  325025
time when the best tree is achieved:  18.77262282371521
TOTAL COUNT:  34097955
huxiyangdeMacBook-Pro:src huxiyang$ python3.7 test_accuracy.py
/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
COUNT: 26000000
COUNT: 27000000
COUNT: 28000000
COUNT: 29000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.0112771987915
lambda:  0.00035
leaves:  [(-6,), (-5, 2, 6), (1, 5, 6, 10), (-9, -5, -2, -1, 6), (-9, -5, -2, 1, 6), (-5, -2, -1, 6, 9), (-5, -2, 1, 6, 9), (-12, -10, -1, 5, 6), (-12, -10, 1, 5, 6), (-10, -7, 5, 6, 12), (-10, 5, 6, 7, 12), (-9, -1, 5, 6, 10), (-1, 5, 6, 9, 10)]
num_captured:  [275, 370, 21, 357, 347, 83, 51, 2249, 1564, 629, 349, 504, 108]
num_captured_incorrect:  [68, 61, 2, 94, 157, 21, 22, 687, 502, 269, 126, 208, 45]
prediction:  [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0]
Objective:  0.33204384682206456
Accuracy:  0.6725061531779355
COUNT of the best tree:  28804781
time when the best tree is achieved:  1786.0228562355042
TOTAL COUNT:  29080604
nrule: 12
ndata: 6907
gr: [0.00438766 0.0037798  0.00481064 0.00654486 0.00818606 0.00697492
 0.00861952 0.01958141 0.0261244  0.00328364 0.0004441  0.03628272]
order: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
odr: [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
the order of x's columns:  [11, 8, 7, 6, 4, 5, 3, 2, 0, 1, 9, 10]
COUNT: 1000000
COUNT: 2000000
COUNT: 3000000
COUNT: 4000000
COUNT: 5000000
COUNT: 6000000
COUNT: 7000000
COUNT: 8000000
COUNT: 9000000
COUNT: 10000000
COUNT: 11000000
COUNT: 12000000
COUNT: 13000000
COUNT: 14000000
COUNT: 15000000
COUNT: 16000000
COUNT: 17000000
COUNT: 18000000
COUNT: 19000000
COUNT: 20000000
COUNT: 21000000
COUNT: 22000000
COUNT: 23000000
COUNT: 24000000
COUNT: 25000000
>>> log: False
>>> support bound: True
>>> incre_support: True
>>> accurate support bound: True
>>> equiv points bound: True
>>> lookahead bound: True
prior_metric= curiosity
total time:  1800.003182888031
lambda:  0.00025
leaves:  [(-6,), (-5, -1, 6), (-3, 1, 6), (-12, -10, -1, 5, 6), (-12, -1, 5, 6, 10), (-7, -1, 5, 6, 12), (-1, 5, 6, 7, 12), (-10, -9, 1, 3, 6), (-9, 1, 3, 6, 10), (-5, 1, 3, 6, 9), (1, 3, 5, 6, 9)]
num_captured:  [275, 810, 338, 2249, 513, 629, 448, 1399, 9, 49, 188]
num_captured_incorrect:  [68, 176, 75, 687, 244, 269, 153, 525, 1, 20, 60]
prediction:  [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1]
Objective:  0.3325603373389315
Accuracy:  0.6701896626610685
COUNT of the best tree:  2809911
time when the best tree is achieved:  130.26785373687744
TOTAL COUNT:  25131822
huxiyangdeMacBook-Pro:src huxiyang$ mprof
Usage: mprof <command> <options> <arguments>

Available commands:

    run      run a given command or python file
    rm       remove a given file generated by mprof
    clean    clean the current directory from files created by mprof
    list     display existing profiles, with indices
    plot     plot memory consumption generated by mprof run

Type mprof <command> --help for usage help on a specific command.
For example, mprof plot --help will list all plotting options.

huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
No input file found.
This program looks for mprofile_*.dat files, generated by the 'mprof run' command.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$ mprof plot
Using last profile data.
huxiyangdeMacBook-Pro:src huxiyang$
